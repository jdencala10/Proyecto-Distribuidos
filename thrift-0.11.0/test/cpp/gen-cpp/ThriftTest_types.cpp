/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftTest_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thrift { namespace test {

int _kNumberzValues[] = {
  Numberz::ONE,
  Numberz::TWO,
  Numberz::THREE,
  Numberz::FIVE,
  Numberz::SIX,
  Numberz::EIGHT
};
const char* _kNumberzNames[] = {
  "ONE",
  "TWO",
  "THREE",
  "FIVE",
  "SIX",
  "EIGHT"
};
const std::map<int, const char*> _Numberz_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kNumberzValues, _kNumberzNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Numberz::type& val) {
  std::map<int, const char*>::const_iterator it = _Numberz_VALUES_TO_NAMES.find(val);
  if (it != _Numberz_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Bonk::~Bonk() throw() {
}


void Bonk::__set_message(const std::string& val) {
  this->message = val;
}

void Bonk::__set_type(const int32_t val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const Bonk& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Bonk &a, Bonk &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Bonk::Bonk(const Bonk& other0) {
  message = other0.message;
  type = other0.type;
  __isset = other0.__isset;
}
Bonk& Bonk::operator=(const Bonk& other1) {
  message = other1.message;
  type = other1.type;
  __isset = other1.__isset;
  return *this;
}
void Bonk::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bonk(";
  out << "message=" << to_string(message);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


Bools::~Bools() throw() {
}


void Bools::__set_im_true(const bool val) {
  this->im_true = val;
}

void Bools::__set_im_false(const bool val) {
  this->im_false = val;
}
std::ostream& operator<<(std::ostream& out, const Bools& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Bools &a, Bools &b) {
  using ::std::swap;
  swap(a.im_true, b.im_true);
  swap(a.im_false, b.im_false);
  swap(a.__isset, b.__isset);
}

Bools::Bools(const Bools& other2) {
  im_true = other2.im_true;
  im_false = other2.im_false;
  __isset = other2.__isset;
}
Bools& Bools::operator=(const Bools& other3) {
  im_true = other3.im_true;
  im_false = other3.im_false;
  __isset = other3.__isset;
  return *this;
}
void Bools::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bools(";
  out << "im_true=" << to_string(im_true);
  out << ", " << "im_false=" << to_string(im_false);
  out << ")";
}


Xtruct::~Xtruct() throw() {
}


void Xtruct::__set_string_thing(const std::string& val) {
  this->string_thing = val;
}

void Xtruct::__set_byte_thing(const int8_t val) {
  this->byte_thing = val;
}

void Xtruct::__set_i32_thing(const int32_t val) {
  this->i32_thing = val;
}

void Xtruct::__set_i64_thing(const int64_t val) {
  this->i64_thing = val;
}
std::ostream& operator<<(std::ostream& out, const Xtruct& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Xtruct &a, Xtruct &b) {
  using ::std::swap;
  swap(a.string_thing, b.string_thing);
  swap(a.byte_thing, b.byte_thing);
  swap(a.i32_thing, b.i32_thing);
  swap(a.i64_thing, b.i64_thing);
  swap(a.__isset, b.__isset);
}

Xtruct::Xtruct(const Xtruct& other4) {
  string_thing = other4.string_thing;
  byte_thing = other4.byte_thing;
  i32_thing = other4.i32_thing;
  i64_thing = other4.i64_thing;
  __isset = other4.__isset;
}
Xtruct& Xtruct::operator=(const Xtruct& other5) {
  string_thing = other5.string_thing;
  byte_thing = other5.byte_thing;
  i32_thing = other5.i32_thing;
  i64_thing = other5.i64_thing;
  __isset = other5.__isset;
  return *this;
}
void Xtruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Xtruct(";
  out << "string_thing=" << to_string(string_thing);
  out << ", " << "byte_thing=" << to_string(byte_thing);
  out << ", " << "i32_thing=" << to_string(i32_thing);
  out << ", " << "i64_thing=" << to_string(i64_thing);
  out << ")";
}


Xtruct2::~Xtruct2() throw() {
}


void Xtruct2::__set_byte_thing(const int8_t val) {
  this->byte_thing = val;
}

void Xtruct2::__set_struct_thing(const Xtruct& val) {
  this->struct_thing = val;
}

void Xtruct2::__set_i32_thing(const int32_t val) {
  this->i32_thing = val;
}
std::ostream& operator<<(std::ostream& out, const Xtruct2& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Xtruct2 &a, Xtruct2 &b) {
  using ::std::swap;
  swap(a.byte_thing, b.byte_thing);
  swap(a.struct_thing, b.struct_thing);
  swap(a.i32_thing, b.i32_thing);
  swap(a.__isset, b.__isset);
}

Xtruct2::Xtruct2(const Xtruct2& other6) {
  byte_thing = other6.byte_thing;
  struct_thing = other6.struct_thing;
  i32_thing = other6.i32_thing;
  __isset = other6.__isset;
}
Xtruct2& Xtruct2::operator=(const Xtruct2& other7) {
  byte_thing = other7.byte_thing;
  struct_thing = other7.struct_thing;
  i32_thing = other7.i32_thing;
  __isset = other7.__isset;
  return *this;
}
void Xtruct2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Xtruct2(";
  out << "byte_thing=" << to_string(byte_thing);
  out << ", " << "struct_thing=" << to_string(struct_thing);
  out << ", " << "i32_thing=" << to_string(i32_thing);
  out << ")";
}


Xtruct3::~Xtruct3() throw() {
}


void Xtruct3::__set_string_thing(const std::string& val) {
  this->string_thing = val;
}

void Xtruct3::__set_changed(const int32_t val) {
  this->changed = val;
}

void Xtruct3::__set_i32_thing(const int32_t val) {
  this->i32_thing = val;
}

void Xtruct3::__set_i64_thing(const int64_t val) {
  this->i64_thing = val;
}
std::ostream& operator<<(std::ostream& out, const Xtruct3& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Xtruct3 &a, Xtruct3 &b) {
  using ::std::swap;
  swap(a.string_thing, b.string_thing);
  swap(a.changed, b.changed);
  swap(a.i32_thing, b.i32_thing);
  swap(a.i64_thing, b.i64_thing);
  swap(a.__isset, b.__isset);
}

Xtruct3::Xtruct3(const Xtruct3& other8) {
  string_thing = other8.string_thing;
  changed = other8.changed;
  i32_thing = other8.i32_thing;
  i64_thing = other8.i64_thing;
  __isset = other8.__isset;
}
Xtruct3& Xtruct3::operator=(const Xtruct3& other9) {
  string_thing = other9.string_thing;
  changed = other9.changed;
  i32_thing = other9.i32_thing;
  i64_thing = other9.i64_thing;
  __isset = other9.__isset;
  return *this;
}
void Xtruct3::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Xtruct3(";
  out << "string_thing=" << to_string(string_thing);
  out << ", " << "changed=" << to_string(changed);
  out << ", " << "i32_thing=" << to_string(i32_thing);
  out << ", " << "i64_thing=" << to_string(i64_thing);
  out << ")";
}


Insanity::~Insanity() throw() {
}


void Insanity::__set_userMap(const std::map<Numberz::type, UserId> & val) {
  this->userMap = val;
}

void Insanity::__set_xtructs(const std::vector<Xtruct> & val) {
  this->xtructs = val;
}
std::ostream& operator<<(std::ostream& out, const Insanity& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Insanity &a, Insanity &b) {
  using ::std::swap;
  swap(a.userMap, b.userMap);
  swap(a.xtructs, b.xtructs);
  swap(a.__isset, b.__isset);
}

Insanity::Insanity(const Insanity& other25) {
  userMap = other25.userMap;
  xtructs = other25.xtructs;
  __isset = other25.__isset;
}
Insanity& Insanity::operator=(const Insanity& other26) {
  userMap = other26.userMap;
  xtructs = other26.xtructs;
  __isset = other26.__isset;
  return *this;
}
void Insanity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Insanity(";
  out << "userMap=" << to_string(userMap);
  out << ", " << "xtructs=" << to_string(xtructs);
  out << ")";
}


CrazyNesting::~CrazyNesting() throw() {
}


void CrazyNesting::__set_string_field(const std::string& val) {
  this->string_field = val;
}

void CrazyNesting::__set_set_field(const std::set<Insanity> & val) {
  this->set_field = val;
__isset.set_field = true;
}

void CrazyNesting::__set_list_field(const std::vector<std::map<std::set<int32_t> , std::map<int32_t, std::set<std::vector<std::map<Insanity, std::string> > > > > > & val) {
  this->list_field = val;
}

void CrazyNesting::__set_binary_field(const std::string& val) {
  this->binary_field = val;
}
std::ostream& operator<<(std::ostream& out, const CrazyNesting& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CrazyNesting &a, CrazyNesting &b) {
  using ::std::swap;
  swap(a.string_field, b.string_field);
  swap(a.set_field, b.set_field);
  swap(a.list_field, b.list_field);
  swap(a.binary_field, b.binary_field);
  swap(a.__isset, b.__isset);
}

CrazyNesting::CrazyNesting(const CrazyNesting& other84) {
  string_field = other84.string_field;
  set_field = other84.set_field;
  list_field = other84.list_field;
  binary_field = other84.binary_field;
  __isset = other84.__isset;
}
CrazyNesting& CrazyNesting::operator=(const CrazyNesting& other85) {
  string_field = other85.string_field;
  set_field = other85.set_field;
  list_field = other85.list_field;
  binary_field = other85.binary_field;
  __isset = other85.__isset;
  return *this;
}
void CrazyNesting::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CrazyNesting(";
  out << "string_field=" << to_string(string_field);
  out << ", " << "set_field="; (__isset.set_field ? (out << to_string(set_field)) : (out << "<null>"));
  out << ", " << "list_field=" << to_string(list_field);
  out << ", " << "binary_field=" << to_string(binary_field);
  out << ")";
}


SomeUnion::~SomeUnion() throw() {
}


void SomeUnion::__set_map_thing(const std::map<Numberz::type, UserId> & val) {
  this->map_thing = val;
__isset.map_thing = true;
}

void SomeUnion::__set_string_thing(const std::string& val) {
  this->string_thing = val;
__isset.string_thing = true;
}

void SomeUnion::__set_i32_thing(const int32_t val) {
  this->i32_thing = val;
__isset.i32_thing = true;
}

void SomeUnion::__set_xtruct_thing(const Xtruct3& val) {
  this->xtruct_thing = val;
__isset.xtruct_thing = true;
}

void SomeUnion::__set_insanity_thing(const Insanity& val) {
  this->insanity_thing = val;
__isset.insanity_thing = true;
}
std::ostream& operator<<(std::ostream& out, const SomeUnion& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SomeUnion &a, SomeUnion &b) {
  using ::std::swap;
  swap(a.map_thing, b.map_thing);
  swap(a.string_thing, b.string_thing);
  swap(a.i32_thing, b.i32_thing);
  swap(a.xtruct_thing, b.xtruct_thing);
  swap(a.insanity_thing, b.insanity_thing);
  swap(a.__isset, b.__isset);
}

SomeUnion::SomeUnion(const SomeUnion& other95) {
  map_thing = other95.map_thing;
  string_thing = other95.string_thing;
  i32_thing = other95.i32_thing;
  xtruct_thing = other95.xtruct_thing;
  insanity_thing = other95.insanity_thing;
  __isset = other95.__isset;
}
SomeUnion& SomeUnion::operator=(const SomeUnion& other96) {
  map_thing = other96.map_thing;
  string_thing = other96.string_thing;
  i32_thing = other96.i32_thing;
  xtruct_thing = other96.xtruct_thing;
  insanity_thing = other96.insanity_thing;
  __isset = other96.__isset;
  return *this;
}
void SomeUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SomeUnion(";
  out << "map_thing="; (__isset.map_thing ? (out << to_string(map_thing)) : (out << "<null>"));
  out << ", " << "string_thing="; (__isset.string_thing ? (out << to_string(string_thing)) : (out << "<null>"));
  out << ", " << "i32_thing="; (__isset.i32_thing ? (out << to_string(i32_thing)) : (out << "<null>"));
  out << ", " << "xtruct_thing="; (__isset.xtruct_thing ? (out << to_string(xtruct_thing)) : (out << "<null>"));
  out << ", " << "insanity_thing="; (__isset.insanity_thing ? (out << to_string(insanity_thing)) : (out << "<null>"));
  out << ")";
}


Xception::~Xception() throw() {
}


void Xception::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void Xception::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const Xception& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Xception &a, Xception &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

Xception::Xception(const Xception& other97) : TException() {
  errorCode = other97.errorCode;
  message = other97.message;
  __isset = other97.__isset;
}
Xception& Xception::operator=(const Xception& other98) {
  errorCode = other98.errorCode;
  message = other98.message;
  __isset = other98.__isset;
  return *this;
}
void Xception::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Xception(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "message=" << to_string(message);
  out << ")";
}

const char* Xception::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: Xception";
  }
}


Xception2::~Xception2() throw() {
}


void Xception2::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void Xception2::__set_struct_thing(const Xtruct& val) {
  this->struct_thing = val;
}
std::ostream& operator<<(std::ostream& out, const Xception2& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Xception2 &a, Xception2 &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.struct_thing, b.struct_thing);
  swap(a.__isset, b.__isset);
}

Xception2::Xception2(const Xception2& other99) : TException() {
  errorCode = other99.errorCode;
  struct_thing = other99.struct_thing;
  __isset = other99.__isset;
}
Xception2& Xception2::operator=(const Xception2& other100) {
  errorCode = other100.errorCode;
  struct_thing = other100.struct_thing;
  __isset = other100.__isset;
  return *this;
}
void Xception2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Xception2(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "struct_thing=" << to_string(struct_thing);
  out << ")";
}

const char* Xception2::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: Xception2";
  }
}


EmptyStruct::~EmptyStruct() throw() {
}

std::ostream& operator<<(std::ostream& out, const EmptyStruct& obj)
{
  obj.printTo(out);
  return out;
}


void swap(EmptyStruct &a, EmptyStruct &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

EmptyStruct::EmptyStruct(const EmptyStruct& other101) {
  (void) other101;
}
EmptyStruct& EmptyStruct::operator=(const EmptyStruct& other102) {
  (void) other102;
  return *this;
}
void EmptyStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmptyStruct(";
  out << ")";
}


OneField::~OneField() throw() {
}


void OneField::__set_field(const EmptyStruct& val) {
  this->field = val;
}
std::ostream& operator<<(std::ostream& out, const OneField& obj)
{
  obj.printTo(out);
  return out;
}


void swap(OneField &a, OneField &b) {
  using ::std::swap;
  swap(a.field, b.field);
  swap(a.__isset, b.__isset);
}

OneField::OneField(const OneField& other103) {
  field = other103.field;
  __isset = other103.__isset;
}
OneField& OneField::operator=(const OneField& other104) {
  field = other104.field;
  __isset = other104.__isset;
  return *this;
}
void OneField::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OneField(";
  out << "field=" << to_string(field);
  out << ")";
}


VersioningTestV1::~VersioningTestV1() throw() {
}


void VersioningTestV1::__set_begin_in_both(const int32_t val) {
  this->begin_in_both = val;
}

void VersioningTestV1::__set_old_string(const std::string& val) {
  this->old_string = val;
}

void VersioningTestV1::__set_end_in_both(const int32_t val) {
  this->end_in_both = val;
}
std::ostream& operator<<(std::ostream& out, const VersioningTestV1& obj)
{
  obj.printTo(out);
  return out;
}


void swap(VersioningTestV1 &a, VersioningTestV1 &b) {
  using ::std::swap;
  swap(a.begin_in_both, b.begin_in_both);
  swap(a.old_string, b.old_string);
  swap(a.end_in_both, b.end_in_both);
  swap(a.__isset, b.__isset);
}

VersioningTestV1::VersioningTestV1(const VersioningTestV1& other105) {
  begin_in_both = other105.begin_in_both;
  old_string = other105.old_string;
  end_in_both = other105.end_in_both;
  __isset = other105.__isset;
}
VersioningTestV1& VersioningTestV1::operator=(const VersioningTestV1& other106) {
  begin_in_both = other106.begin_in_both;
  old_string = other106.old_string;
  end_in_both = other106.end_in_both;
  __isset = other106.__isset;
  return *this;
}
void VersioningTestV1::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VersioningTestV1(";
  out << "begin_in_both=" << to_string(begin_in_both);
  out << ", " << "old_string=" << to_string(old_string);
  out << ", " << "end_in_both=" << to_string(end_in_both);
  out << ")";
}


VersioningTestV2::~VersioningTestV2() throw() {
}


void VersioningTestV2::__set_begin_in_both(const int32_t val) {
  this->begin_in_both = val;
}

void VersioningTestV2::__set_newint(const int32_t val) {
  this->newint = val;
}

void VersioningTestV2::__set_newbyte(const int8_t val) {
  this->newbyte = val;
}

void VersioningTestV2::__set_newshort(const int16_t val) {
  this->newshort = val;
}

void VersioningTestV2::__set_newlong(const int64_t val) {
  this->newlong = val;
}

void VersioningTestV2::__set_newdouble(const double val) {
  this->newdouble = val;
}

void VersioningTestV2::__set_newstruct(const Bonk& val) {
  this->newstruct = val;
}

void VersioningTestV2::__set_newlist(const std::vector<int32_t> & val) {
  this->newlist = val;
}

void VersioningTestV2::__set_newset(const std::set<int32_t> & val) {
  this->newset = val;
}

void VersioningTestV2::__set_newmap(const std::map<int32_t, int32_t> & val) {
  this->newmap = val;
}

void VersioningTestV2::__set_newstring(const std::string& val) {
  this->newstring = val;
}

void VersioningTestV2::__set_end_in_both(const int32_t val) {
  this->end_in_both = val;
}
std::ostream& operator<<(std::ostream& out, const VersioningTestV2& obj)
{
  obj.printTo(out);
  return out;
}


void swap(VersioningTestV2 &a, VersioningTestV2 &b) {
  using ::std::swap;
  swap(a.begin_in_both, b.begin_in_both);
  swap(a.newint, b.newint);
  swap(a.newbyte, b.newbyte);
  swap(a.newshort, b.newshort);
  swap(a.newlong, b.newlong);
  swap(a.newdouble, b.newdouble);
  swap(a.newstruct, b.newstruct);
  swap(a.newlist, b.newlist);
  swap(a.newset, b.newset);
  swap(a.newmap, b.newmap);
  swap(a.newstring, b.newstring);
  swap(a.end_in_both, b.end_in_both);
  swap(a.__isset, b.__isset);
}

VersioningTestV2::VersioningTestV2(const VersioningTestV2& other128) {
  begin_in_both = other128.begin_in_both;
  newint = other128.newint;
  newbyte = other128.newbyte;
  newshort = other128.newshort;
  newlong = other128.newlong;
  newdouble = other128.newdouble;
  newstruct = other128.newstruct;
  newlist = other128.newlist;
  newset = other128.newset;
  newmap = other128.newmap;
  newstring = other128.newstring;
  end_in_both = other128.end_in_both;
  __isset = other128.__isset;
}
VersioningTestV2& VersioningTestV2::operator=(const VersioningTestV2& other129) {
  begin_in_both = other129.begin_in_both;
  newint = other129.newint;
  newbyte = other129.newbyte;
  newshort = other129.newshort;
  newlong = other129.newlong;
  newdouble = other129.newdouble;
  newstruct = other129.newstruct;
  newlist = other129.newlist;
  newset = other129.newset;
  newmap = other129.newmap;
  newstring = other129.newstring;
  end_in_both = other129.end_in_both;
  __isset = other129.__isset;
  return *this;
}
void VersioningTestV2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VersioningTestV2(";
  out << "begin_in_both=" << to_string(begin_in_both);
  out << ", " << "newint=" << to_string(newint);
  out << ", " << "newbyte=" << to_string(newbyte);
  out << ", " << "newshort=" << to_string(newshort);
  out << ", " << "newlong=" << to_string(newlong);
  out << ", " << "newdouble=" << to_string(newdouble);
  out << ", " << "newstruct=" << to_string(newstruct);
  out << ", " << "newlist=" << to_string(newlist);
  out << ", " << "newset=" << to_string(newset);
  out << ", " << "newmap=" << to_string(newmap);
  out << ", " << "newstring=" << to_string(newstring);
  out << ", " << "end_in_both=" << to_string(end_in_both);
  out << ")";
}


ListTypeVersioningV1::~ListTypeVersioningV1() throw() {
}


void ListTypeVersioningV1::__set_myints(const std::vector<int32_t> & val) {
  this->myints = val;
}

void ListTypeVersioningV1::__set_hello(const std::string& val) {
  this->hello = val;
}
std::ostream& operator<<(std::ostream& out, const ListTypeVersioningV1& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ListTypeVersioningV1 &a, ListTypeVersioningV1 &b) {
  using ::std::swap;
  swap(a.myints, b.myints);
  swap(a.hello, b.hello);
  swap(a.__isset, b.__isset);
}

ListTypeVersioningV1::ListTypeVersioningV1(const ListTypeVersioningV1& other136) {
  myints = other136.myints;
  hello = other136.hello;
  __isset = other136.__isset;
}
ListTypeVersioningV1& ListTypeVersioningV1::operator=(const ListTypeVersioningV1& other137) {
  myints = other137.myints;
  hello = other137.hello;
  __isset = other137.__isset;
  return *this;
}
void ListTypeVersioningV1::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListTypeVersioningV1(";
  out << "myints=" << to_string(myints);
  out << ", " << "hello=" << to_string(hello);
  out << ")";
}


ListTypeVersioningV2::~ListTypeVersioningV2() throw() {
}


void ListTypeVersioningV2::__set_strings(const std::vector<std::string> & val) {
  this->strings = val;
}

void ListTypeVersioningV2::__set_hello(const std::string& val) {
  this->hello = val;
}
std::ostream& operator<<(std::ostream& out, const ListTypeVersioningV2& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ListTypeVersioningV2 &a, ListTypeVersioningV2 &b) {
  using ::std::swap;
  swap(a.strings, b.strings);
  swap(a.hello, b.hello);
  swap(a.__isset, b.__isset);
}

ListTypeVersioningV2::ListTypeVersioningV2(const ListTypeVersioningV2& other144) {
  strings = other144.strings;
  hello = other144.hello;
  __isset = other144.__isset;
}
ListTypeVersioningV2& ListTypeVersioningV2::operator=(const ListTypeVersioningV2& other145) {
  strings = other145.strings;
  hello = other145.hello;
  __isset = other145.__isset;
  return *this;
}
void ListTypeVersioningV2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListTypeVersioningV2(";
  out << "strings=" << to_string(strings);
  out << ", " << "hello=" << to_string(hello);
  out << ")";
}


GuessProtocolStruct::~GuessProtocolStruct() throw() {
}


void GuessProtocolStruct::__set_map_field(const std::map<std::string, std::string> & val) {
  this->map_field = val;
}
std::ostream& operator<<(std::ostream& out, const GuessProtocolStruct& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GuessProtocolStruct &a, GuessProtocolStruct &b) {
  using ::std::swap;
  swap(a.map_field, b.map_field);
  swap(a.__isset, b.__isset);
}

GuessProtocolStruct::GuessProtocolStruct(const GuessProtocolStruct& other154) {
  map_field = other154.map_field;
  __isset = other154.__isset;
}
GuessProtocolStruct& GuessProtocolStruct::operator=(const GuessProtocolStruct& other155) {
  map_field = other155.map_field;
  __isset = other155.__isset;
  return *this;
}
void GuessProtocolStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GuessProtocolStruct(";
  out << "map_field=" << to_string(map_field);
  out << ")";
}


LargeDeltas::~LargeDeltas() throw() {
}


void LargeDeltas::__set_b1(const Bools& val) {
  this->b1 = val;
}

void LargeDeltas::__set_b10(const Bools& val) {
  this->b10 = val;
}

void LargeDeltas::__set_b100(const Bools& val) {
  this->b100 = val;
}

void LargeDeltas::__set_check_true(const bool val) {
  this->check_true = val;
}

void LargeDeltas::__set_b1000(const Bools& val) {
  this->b1000 = val;
}

void LargeDeltas::__set_check_false(const bool val) {
  this->check_false = val;
}

void LargeDeltas::__set_vertwo2000(const VersioningTestV2& val) {
  this->vertwo2000 = val;
}

void LargeDeltas::__set_a_set2500(const std::set<std::string> & val) {
  this->a_set2500 = val;
}

void LargeDeltas::__set_vertwo3000(const VersioningTestV2& val) {
  this->vertwo3000 = val;
}

void LargeDeltas::__set_big_numbers(const std::vector<int32_t> & val) {
  this->big_numbers = val;
}
std::ostream& operator<<(std::ostream& out, const LargeDeltas& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LargeDeltas &a, LargeDeltas &b) {
  using ::std::swap;
  swap(a.b1, b.b1);
  swap(a.b10, b.b10);
  swap(a.b100, b.b100);
  swap(a.check_true, b.check_true);
  swap(a.b1000, b.b1000);
  swap(a.check_false, b.check_false);
  swap(a.vertwo2000, b.vertwo2000);
  swap(a.a_set2500, b.a_set2500);
  swap(a.vertwo3000, b.vertwo3000);
  swap(a.big_numbers, b.big_numbers);
  swap(a.__isset, b.__isset);
}

LargeDeltas::LargeDeltas(const LargeDeltas& other169) {
  b1 = other169.b1;
  b10 = other169.b10;
  b100 = other169.b100;
  check_true = other169.check_true;
  b1000 = other169.b1000;
  check_false = other169.check_false;
  vertwo2000 = other169.vertwo2000;
  a_set2500 = other169.a_set2500;
  vertwo3000 = other169.vertwo3000;
  big_numbers = other169.big_numbers;
  __isset = other169.__isset;
}
LargeDeltas& LargeDeltas::operator=(const LargeDeltas& other170) {
  b1 = other170.b1;
  b10 = other170.b10;
  b100 = other170.b100;
  check_true = other170.check_true;
  b1000 = other170.b1000;
  check_false = other170.check_false;
  vertwo2000 = other170.vertwo2000;
  a_set2500 = other170.a_set2500;
  vertwo3000 = other170.vertwo3000;
  big_numbers = other170.big_numbers;
  __isset = other170.__isset;
  return *this;
}
void LargeDeltas::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LargeDeltas(";
  out << "b1=" << to_string(b1);
  out << ", " << "b10=" << to_string(b10);
  out << ", " << "b100=" << to_string(b100);
  out << ", " << "check_true=" << to_string(check_true);
  out << ", " << "b1000=" << to_string(b1000);
  out << ", " << "check_false=" << to_string(check_false);
  out << ", " << "vertwo2000=" << to_string(vertwo2000);
  out << ", " << "a_set2500=" << to_string(a_set2500);
  out << ", " << "vertwo3000=" << to_string(vertwo3000);
  out << ", " << "big_numbers=" << to_string(big_numbers);
  out << ")";
}


NestedListsI32x2::~NestedListsI32x2() throw() {
}


void NestedListsI32x2::__set_integerlist(const std::vector<std::vector<int32_t> > & val) {
  this->integerlist = val;
}
std::ostream& operator<<(std::ostream& out, const NestedListsI32x2& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NestedListsI32x2 &a, NestedListsI32x2 &b) {
  using ::std::swap;
  swap(a.integerlist, b.integerlist);
  swap(a.__isset, b.__isset);
}

NestedListsI32x2::NestedListsI32x2(const NestedListsI32x2& other183) {
  integerlist = other183.integerlist;
  __isset = other183.__isset;
}
NestedListsI32x2& NestedListsI32x2::operator=(const NestedListsI32x2& other184) {
  integerlist = other184.integerlist;
  __isset = other184.__isset;
  return *this;
}
void NestedListsI32x2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NestedListsI32x2(";
  out << "integerlist=" << to_string(integerlist);
  out << ")";
}


NestedListsI32x3::~NestedListsI32x3() throw() {
}


void NestedListsI32x3::__set_integerlist(const std::vector<std::vector<std::vector<int32_t> > > & val) {
  this->integerlist = val;
}
std::ostream& operator<<(std::ostream& out, const NestedListsI32x3& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NestedListsI32x3 &a, NestedListsI32x3 &b) {
  using ::std::swap;
  swap(a.integerlist, b.integerlist);
  swap(a.__isset, b.__isset);
}

NestedListsI32x3::NestedListsI32x3(const NestedListsI32x3& other203) {
  integerlist = other203.integerlist;
  __isset = other203.__isset;
}
NestedListsI32x3& NestedListsI32x3::operator=(const NestedListsI32x3& other204) {
  integerlist = other204.integerlist;
  __isset = other204.__isset;
  return *this;
}
void NestedListsI32x3::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NestedListsI32x3(";
  out << "integerlist=" << to_string(integerlist);
  out << ")";
}


NestedMixedx2::~NestedMixedx2() throw() {
}


void NestedMixedx2::__set_int_set_list(const std::vector<std::set<int32_t> > & val) {
  this->int_set_list = val;
}

void NestedMixedx2::__set_map_int_strset(const std::map<int32_t, std::set<std::string> > & val) {
  this->map_int_strset = val;
}

void NestedMixedx2::__set_map_int_strset_list(const std::vector<std::map<int32_t, std::set<std::string> > > & val) {
  this->map_int_strset_list = val;
}
std::ostream& operator<<(std::ostream& out, const NestedMixedx2& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NestedMixedx2 &a, NestedMixedx2 &b) {
  using ::std::swap;
  swap(a.int_set_list, b.int_set_list);
  swap(a.map_int_strset, b.map_int_strset);
  swap(a.map_int_strset_list, b.map_int_strset_list);
  swap(a.__isset, b.__isset);
}

NestedMixedx2::NestedMixedx2(const NestedMixedx2& other254) {
  int_set_list = other254.int_set_list;
  map_int_strset = other254.map_int_strset;
  map_int_strset_list = other254.map_int_strset_list;
  __isset = other254.__isset;
}
NestedMixedx2& NestedMixedx2::operator=(const NestedMixedx2& other255) {
  int_set_list = other255.int_set_list;
  map_int_strset = other255.map_int_strset;
  map_int_strset_list = other255.map_int_strset_list;
  __isset = other255.__isset;
  return *this;
}
void NestedMixedx2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NestedMixedx2(";
  out << "int_set_list=" << to_string(int_set_list);
  out << ", " << "map_int_strset=" << to_string(map_int_strset);
  out << ", " << "map_int_strset_list=" << to_string(map_int_strset_list);
  out << ")";
}


ListBonks::~ListBonks() throw() {
}


void ListBonks::__set_bonk(const std::vector<Bonk> & val) {
  this->bonk = val;
}
std::ostream& operator<<(std::ostream& out, const ListBonks& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ListBonks &a, ListBonks &b) {
  using ::std::swap;
  swap(a.bonk, b.bonk);
  swap(a.__isset, b.__isset);
}

ListBonks::ListBonks(const ListBonks& other262) {
  bonk = other262.bonk;
  __isset = other262.__isset;
}
ListBonks& ListBonks::operator=(const ListBonks& other263) {
  bonk = other263.bonk;
  __isset = other263.__isset;
  return *this;
}
void ListBonks::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListBonks(";
  out << "bonk=" << to_string(bonk);
  out << ")";
}


NestedListsBonk::~NestedListsBonk() throw() {
}


void NestedListsBonk::__set_bonk(const std::vector<std::vector<std::vector<Bonk> > > & val) {
  this->bonk = val;
}
std::ostream& operator<<(std::ostream& out, const NestedListsBonk& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NestedListsBonk &a, NestedListsBonk &b) {
  using ::std::swap;
  swap(a.bonk, b.bonk);
  swap(a.__isset, b.__isset);
}

NestedListsBonk::NestedListsBonk(const NestedListsBonk& other282) {
  bonk = other282.bonk;
  __isset = other282.__isset;
}
NestedListsBonk& NestedListsBonk::operator=(const NestedListsBonk& other283) {
  bonk = other283.bonk;
  __isset = other283.__isset;
  return *this;
}
void NestedListsBonk::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NestedListsBonk(";
  out << "bonk=" << to_string(bonk);
  out << ")";
}


BoolTest::~BoolTest() throw() {
}


void BoolTest::__set_b(const bool val) {
  this->b = val;
__isset.b = true;
}

void BoolTest::__set_s(const std::string& val) {
  this->s = val;
__isset.s = true;
}
std::ostream& operator<<(std::ostream& out, const BoolTest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BoolTest &a, BoolTest &b) {
  using ::std::swap;
  swap(a.b, b.b);
  swap(a.s, b.s);
  swap(a.__isset, b.__isset);
}

BoolTest::BoolTest(const BoolTest& other284) {
  b = other284.b;
  s = other284.s;
  __isset = other284.__isset;
}
BoolTest& BoolTest::operator=(const BoolTest& other285) {
  b = other285.b;
  s = other285.s;
  __isset = other285.__isset;
  return *this;
}
void BoolTest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BoolTest(";
  out << "b="; (__isset.b ? (out << to_string(b)) : (out << "<null>"));
  out << ", " << "s="; (__isset.s ? (out << to_string(s)) : (out << "<null>"));
  out << ")";
}


StructA::~StructA() throw() {
}


void StructA::__set_s(const std::string& val) {
  this->s = val;
}
std::ostream& operator<<(std::ostream& out, const StructA& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StructA &a, StructA &b) {
  using ::std::swap;
  swap(a.s, b.s);
}

StructA::StructA(const StructA& other286) {
  s = other286.s;
}
StructA& StructA::operator=(const StructA& other287) {
  s = other287.s;
  return *this;
}
void StructA::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StructA(";
  out << "s=" << to_string(s);
  out << ")";
}


StructB::~StructB() throw() {
}


void StructB::__set_aa(const StructA& val) {
  this->aa = val;
__isset.aa = true;
}

void StructB::__set_ab(const StructA& val) {
  this->ab = val;
}
std::ostream& operator<<(std::ostream& out, const StructB& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StructB &a, StructB &b) {
  using ::std::swap;
  swap(a.aa, b.aa);
  swap(a.ab, b.ab);
  swap(a.__isset, b.__isset);
}

StructB::StructB(const StructB& other288) {
  aa = other288.aa;
  ab = other288.ab;
  __isset = other288.__isset;
}
StructB& StructB::operator=(const StructB& other289) {
  aa = other289.aa;
  ab = other289.ab;
  __isset = other289.__isset;
  return *this;
}
void StructB::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StructB(";
  out << "aa="; (__isset.aa ? (out << to_string(aa)) : (out << "<null>"));
  out << ", " << "ab=" << to_string(ab);
  out << ")";
}

}} // namespace
