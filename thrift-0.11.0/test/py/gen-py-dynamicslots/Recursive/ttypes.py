#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:dynamic,slots
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
from thrift.protocol.TBase import TBase, TFrozenBase, TExceptionBase, TTransport
all_structs = []


class RecTree(TBase):
    """
    Attributes:
     - children
     - item
    """

    __slots__ = (
        'children',
        'item',
    )


    def __init__(self, children=None, item=None,):
        self.children = children
        self.item = item


class RecList(TBase):
    """
    Attributes:
     - nextitem
     - item
    """

    __slots__ = (
        'nextitem',
        'item',
    )


    def __init__(self, nextitem=None, item=None,):
        self.nextitem = nextitem
        self.item = item


class CoRec(TBase):
    """
    Attributes:
     - other
    """

    __slots__ = (
        'other',
    )


    def __init__(self, other=None,):
        self.other = other


class CoRec2(TBase):
    """
    Attributes:
     - other
    """

    __slots__ = (
        'other',
    )


    def __init__(self, other=None,):
        self.other = other


class VectorTest(TBase):
    """
    Attributes:
     - lister
    """

    __slots__ = (
        'lister',
    )


    def __init__(self, lister=None,):
        self.lister = lister
all_structs.append(RecTree)
RecTree.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'children', (TType.STRUCT, [RecTree, None], False), None, ),  # 1
    (2, TType.I16, 'item', None, None, ),  # 2
)
all_structs.append(RecList)
RecList.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nextitem', [RecList, None], None, ),  # 1
    None,  # 2
    (3, TType.I16, 'item', None, None, ),  # 3
)
all_structs.append(CoRec)
CoRec.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'other', [CoRec2, None], None, ),  # 1
)
all_structs.append(CoRec2)
CoRec2.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'other', [CoRec, None], None, ),  # 1
)
all_structs.append(VectorTest)
VectorTest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'lister', (TType.STRUCT, [RecList, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
