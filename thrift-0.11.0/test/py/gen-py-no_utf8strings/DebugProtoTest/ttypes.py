#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:no_utf8strings
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec


from thrift.transport import TTransport
all_structs = []


class SomeEnum(object):
    ONE = 1
    TWO = 2

    _VALUES_TO_NAMES = {
        1: "ONE",
        2: "TWO",
    }

    _NAMES_TO_VALUES = {
        "ONE": 1,
        "TWO": 2,
    }


class Doubles(object):
    """
    Attributes:
     - nan
     - inf
     - neginf
     - repeating
     - big
     - tiny
     - zero
     - negzero
    """


    def __init__(self, nan=None, inf=None, neginf=None, repeating=None, big=None, tiny=None, zero=None, negzero=None,):
        self.nan = nan
        self.inf = inf
        self.neginf = neginf
        self.repeating = repeating
        self.big = big
        self.tiny = tiny
        self.zero = zero
        self.negzero = negzero

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.nan = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.inf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.neginf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.repeating = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.big = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.tiny = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.zero = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.negzero = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Doubles')
        if self.nan is not None:
            oprot.writeFieldBegin('nan', TType.DOUBLE, 1)
            oprot.writeDouble(self.nan)
            oprot.writeFieldEnd()
        if self.inf is not None:
            oprot.writeFieldBegin('inf', TType.DOUBLE, 2)
            oprot.writeDouble(self.inf)
            oprot.writeFieldEnd()
        if self.neginf is not None:
            oprot.writeFieldBegin('neginf', TType.DOUBLE, 3)
            oprot.writeDouble(self.neginf)
            oprot.writeFieldEnd()
        if self.repeating is not None:
            oprot.writeFieldBegin('repeating', TType.DOUBLE, 4)
            oprot.writeDouble(self.repeating)
            oprot.writeFieldEnd()
        if self.big is not None:
            oprot.writeFieldBegin('big', TType.DOUBLE, 5)
            oprot.writeDouble(self.big)
            oprot.writeFieldEnd()
        if self.tiny is not None:
            oprot.writeFieldBegin('tiny', TType.DOUBLE, 6)
            oprot.writeDouble(self.tiny)
            oprot.writeFieldEnd()
        if self.zero is not None:
            oprot.writeFieldBegin('zero', TType.DOUBLE, 7)
            oprot.writeDouble(self.zero)
            oprot.writeFieldEnd()
        if self.negzero is not None:
            oprot.writeFieldBegin('negzero', TType.DOUBLE, 8)
            oprot.writeDouble(self.negzero)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OneOfEach(object):
    """
    Attributes:
     - im_true
     - im_false
     - a_bite
     - integer16
     - integer32
     - integer64
     - double_precision
     - some_characters
     - zomg_unicode
     - what_who
     - base64
     - byte_list
     - i16_list
     - i64_list
    """


    def __init__(self, im_true=None, im_false=None, a_bite=127, integer16=32767, integer32=None, integer64=10000000000, double_precision=None, some_characters=None, zomg_unicode=None, what_who=None, base64=None, byte_list=[
        1,
        2,
        3,
    ], i16_list=[
        1,
        2,
        3,
    ], i64_list=[
        1,
        2,
        3,
    ],):
        self.im_true = im_true
        self.im_false = im_false
        self.a_bite = a_bite
        self.integer16 = integer16
        self.integer32 = integer32
        self.integer64 = integer64
        self.double_precision = double_precision
        self.some_characters = some_characters
        self.zomg_unicode = zomg_unicode
        self.what_who = what_who
        self.base64 = base64
        if byte_list is self.thrift_spec[12][4]:
            byte_list = [
                1,
                2,
                3,
            ]
        self.byte_list = byte_list
        if i16_list is self.thrift_spec[13][4]:
            i16_list = [
                1,
                2,
                3,
            ]
        self.i16_list = i16_list
        if i64_list is self.thrift_spec[14][4]:
            i64_list = [
                1,
                2,
                3,
            ]
        self.i64_list = i64_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.im_true = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.im_false = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.a_bite = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.integer16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.integer32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.integer64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.double_precision = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.some_characters = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.zomg_unicode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.what_who = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.base64 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.byte_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readByte()
                        self.byte_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.i16_list = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI16()
                        self.i16_list.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.i64_list = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readI64()
                        self.i64_list.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OneOfEach')
        if self.im_true is not None:
            oprot.writeFieldBegin('im_true', TType.BOOL, 1)
            oprot.writeBool(self.im_true)
            oprot.writeFieldEnd()
        if self.im_false is not None:
            oprot.writeFieldBegin('im_false', TType.BOOL, 2)
            oprot.writeBool(self.im_false)
            oprot.writeFieldEnd()
        if self.a_bite is not None:
            oprot.writeFieldBegin('a_bite', TType.BYTE, 3)
            oprot.writeByte(self.a_bite)
            oprot.writeFieldEnd()
        if self.integer16 is not None:
            oprot.writeFieldBegin('integer16', TType.I16, 4)
            oprot.writeI16(self.integer16)
            oprot.writeFieldEnd()
        if self.integer32 is not None:
            oprot.writeFieldBegin('integer32', TType.I32, 5)
            oprot.writeI32(self.integer32)
            oprot.writeFieldEnd()
        if self.integer64 is not None:
            oprot.writeFieldBegin('integer64', TType.I64, 6)
            oprot.writeI64(self.integer64)
            oprot.writeFieldEnd()
        if self.double_precision is not None:
            oprot.writeFieldBegin('double_precision', TType.DOUBLE, 7)
            oprot.writeDouble(self.double_precision)
            oprot.writeFieldEnd()
        if self.some_characters is not None:
            oprot.writeFieldBegin('some_characters', TType.STRING, 8)
            oprot.writeString(self.some_characters)
            oprot.writeFieldEnd()
        if self.zomg_unicode is not None:
            oprot.writeFieldBegin('zomg_unicode', TType.STRING, 9)
            oprot.writeString(self.zomg_unicode)
            oprot.writeFieldEnd()
        if self.what_who is not None:
            oprot.writeFieldBegin('what_who', TType.BOOL, 10)
            oprot.writeBool(self.what_who)
            oprot.writeFieldEnd()
        if self.base64 is not None:
            oprot.writeFieldBegin('base64', TType.STRING, 11)
            oprot.writeBinary(self.base64)
            oprot.writeFieldEnd()
        if self.byte_list is not None:
            oprot.writeFieldBegin('byte_list', TType.LIST, 12)
            oprot.writeListBegin(TType.BYTE, len(self.byte_list))
            for iter18 in self.byte_list:
                oprot.writeByte(iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i16_list is not None:
            oprot.writeFieldBegin('i16_list', TType.LIST, 13)
            oprot.writeListBegin(TType.I16, len(self.i16_list))
            for iter19 in self.i16_list:
                oprot.writeI16(iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i64_list is not None:
            oprot.writeFieldBegin('i64_list', TType.LIST, 14)
            oprot.writeListBegin(TType.I64, len(self.i64_list))
            for iter20 in self.i64_list:
                oprot.writeI64(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bonk(object):
    """
    Attributes:
     - type
     - message
    """


    def __init__(self, type=None, message=None,):
        self.type = type
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bonk')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Nesting(object):
    """
    Attributes:
     - my_bonk
     - my_ooe
    """


    def __init__(self, my_bonk=None, my_ooe=None,):
        self.my_bonk = my_bonk
        self.my_ooe = my_ooe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.my_bonk = Bonk()
                    self.my_bonk.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.my_ooe = OneOfEach()
                    self.my_ooe.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Nesting')
        if self.my_bonk is not None:
            oprot.writeFieldBegin('my_bonk', TType.STRUCT, 1)
            self.my_bonk.write(oprot)
            oprot.writeFieldEnd()
        if self.my_ooe is not None:
            oprot.writeFieldBegin('my_ooe', TType.STRUCT, 2)
            self.my_ooe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HolyMoley(object):
    """
    Attributes:
     - big
     - contain
     - bonks
    """


    def __init__(self, big=None, contain=None, bonks=None,):
        self.big = big
        self.contain = contain
        self.bonks = bonks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.big = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = OneOfEach()
                        _elem26.read(iprot)
                        self.big.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.contain = set()
                    (_etype30, _size27) = iprot.readSetBegin()
                    for _i31 in range(_size27):
                        _elem32 = []
                        (_etype36, _size33) = iprot.readListBegin()
                        for _i37 in range(_size33):
                            _elem38 = iprot.readString()
                            _elem32.append(_elem38)
                        _elem32 = tuple(_elem32)
                        iprot.readListEnd()
                        self.contain.add(_elem32)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.bonks = {}
                    (_ktype40, _vtype41, _size39) = iprot.readMapBegin()
                    for _i43 in range(_size39):
                        _key44 = iprot.readString()
                        _val45 = []
                        (_etype49, _size46) = iprot.readListBegin()
                        for _i50 in range(_size46):
                            _elem51 = Bonk()
                            _elem51.read(iprot)
                            _val45.append(_elem51)
                        iprot.readListEnd()
                        self.bonks[_key44] = _val45
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HolyMoley')
        if self.big is not None:
            oprot.writeFieldBegin('big', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.big))
            for iter52 in self.big:
                iter52.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contain is not None:
            oprot.writeFieldBegin('contain', TType.SET, 2)
            oprot.writeSetBegin(TType.LIST, len(self.contain))
            for iter53 in self.contain:
                oprot.writeListBegin(TType.STRING, len(iter53))
                for iter54 in iter53:
                    oprot.writeString(iter54)
                oprot.writeListEnd()
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.bonks is not None:
            oprot.writeFieldBegin('bonks', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.bonks))
            for kiter55, viter56 in self.bonks.items():
                oprot.writeString(kiter55)
                oprot.writeListBegin(TType.STRUCT, len(viter56))
                for iter57 in viter56:
                    iter57.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Backwards(object):
    """
    Attributes:
     - first_tag2
     - second_tag1
    """


    def __init__(self, first_tag2=None, second_tag1=None,):
        self.first_tag2 = first_tag2
        self.second_tag1 = second_tag1

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I32:
                    self.first_tag2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.I32:
                    self.second_tag1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Backwards')
        if self.second_tag1 is not None:
            oprot.writeFieldBegin('second_tag1', TType.I32, 1)
            oprot.writeI32(self.second_tag1)
            oprot.writeFieldEnd()
        if self.first_tag2 is not None:
            oprot.writeFieldBegin('first_tag2', TType.I32, 2)
            oprot.writeI32(self.first_tag2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Empty(object):


    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash(())

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Empty')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Wrapper(object):
    """
    Attributes:
     - foo
    """


    def __init__(self, foo=None,):
        super(Wrapper, self).__setattr__('foo', foo)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.foo, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    foo = Empty.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            foo=foo,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Wrapper')
        if self.foo is not None:
            oprot.writeFieldBegin('foo', TType.STRUCT, 1)
            self.foo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RandomStuff(object):
    """
    Attributes:
     - a
     - b
     - c
     - d
     - myintlist
     - maps
     - bigint
     - triple
    """


    def __init__(self, a=None, b=None, c=None, d=None, myintlist=None, maps=None, bigint=None, triple=None,):
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.myintlist = myintlist
        self.maps = maps
        self.bigint = bigint
        self.triple = triple

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.a = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.b = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.c = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.d = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.myintlist = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = iprot.readI32()
                        self.myintlist.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.maps = {}
                    (_ktype65, _vtype66, _size64) = iprot.readMapBegin()
                    for _i68 in range(_size64):
                        _key69 = iprot.readI32()
                        _val70 = Wrapper.read(iprot)
                        self.maps[_key69] = _val70
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.bigint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.triple = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RandomStuff')
        if self.a is not None:
            oprot.writeFieldBegin('a', TType.I32, 1)
            oprot.writeI32(self.a)
            oprot.writeFieldEnd()
        if self.b is not None:
            oprot.writeFieldBegin('b', TType.I32, 2)
            oprot.writeI32(self.b)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.I32, 3)
            oprot.writeI32(self.c)
            oprot.writeFieldEnd()
        if self.d is not None:
            oprot.writeFieldBegin('d', TType.I32, 4)
            oprot.writeI32(self.d)
            oprot.writeFieldEnd()
        if self.myintlist is not None:
            oprot.writeFieldBegin('myintlist', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.myintlist))
            for iter71 in self.myintlist:
                oprot.writeI32(iter71)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maps is not None:
            oprot.writeFieldBegin('maps', TType.MAP, 6)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.maps))
            for kiter72, viter73 in self.maps.items():
                oprot.writeI32(kiter72)
                viter73.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.bigint is not None:
            oprot.writeFieldBegin('bigint', TType.I64, 7)
            oprot.writeI64(self.bigint)
            oprot.writeFieldEnd()
        if self.triple is not None:
            oprot.writeFieldBegin('triple', TType.DOUBLE, 8)
            oprot.writeDouble(self.triple)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Base64(object):
    """
    Attributes:
     - a
     - b1
     - b2
     - b3
     - b4
     - b5
     - b6
    """


    def __init__(self, a=None, b1=None, b2=None, b3=None, b4=None, b5=None, b6=None,):
        self.a = a
        self.b1 = b1
        self.b2 = b2
        self.b3 = b3
        self.b4 = b4
        self.b5 = b5
        self.b6 = b6

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.a = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.b1 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.b2 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.b3 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.b4 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.b5 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.b6 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Base64')
        if self.a is not None:
            oprot.writeFieldBegin('a', TType.I32, 1)
            oprot.writeI32(self.a)
            oprot.writeFieldEnd()
        if self.b1 is not None:
            oprot.writeFieldBegin('b1', TType.STRING, 2)
            oprot.writeBinary(self.b1)
            oprot.writeFieldEnd()
        if self.b2 is not None:
            oprot.writeFieldBegin('b2', TType.STRING, 3)
            oprot.writeBinary(self.b2)
            oprot.writeFieldEnd()
        if self.b3 is not None:
            oprot.writeFieldBegin('b3', TType.STRING, 4)
            oprot.writeBinary(self.b3)
            oprot.writeFieldEnd()
        if self.b4 is not None:
            oprot.writeFieldBegin('b4', TType.STRING, 5)
            oprot.writeBinary(self.b4)
            oprot.writeFieldEnd()
        if self.b5 is not None:
            oprot.writeFieldBegin('b5', TType.STRING, 6)
            oprot.writeBinary(self.b5)
            oprot.writeFieldEnd()
        if self.b6 is not None:
            oprot.writeFieldBegin('b6', TType.STRING, 7)
            oprot.writeBinary(self.b6)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CompactProtoTestStruct(object):
    """
    Attributes:
     - a_byte
     - a_i16
     - a_i32
     - a_i64
     - a_double
     - a_string
     - a_binary
     - true_field
     - false_field
     - empty_struct_field
     - byte_list
     - i16_list
     - i32_list
     - i64_list
     - double_list
     - string_list
     - binary_list
     - boolean_list
     - struct_list
     - byte_set
     - i16_set
     - i32_set
     - i64_set
     - double_set
     - string_set
     - binary_set
     - boolean_set
     - struct_set
     - byte_byte_map
     - i16_byte_map
     - i32_byte_map
     - i64_byte_map
     - double_byte_map
     - string_byte_map
     - binary_byte_map
     - boolean_byte_map
     - byte_i16_map
     - byte_i32_map
     - byte_i64_map
     - byte_double_map
     - byte_string_map
     - byte_binary_map
     - byte_boolean_map
     - list_byte_map
     - set_byte_map
     - map_byte_map
     - byte_map_map
     - byte_set_map
     - byte_list_map
    """


    def __init__(self, a_byte=None, a_i16=None, a_i32=None, a_i64=None, a_double=None, a_string=None, a_binary=None, true_field=None, false_field=None, empty_struct_field=None, byte_list=None, i16_list=None, i32_list=None, i64_list=None, double_list=None, string_list=None, binary_list=None, boolean_list=None, struct_list=None, byte_set=None, i16_set=None, i32_set=None, i64_set=None, double_set=None, string_set=None, binary_set=None, boolean_set=None, struct_set=None, byte_byte_map=None, i16_byte_map=None, i32_byte_map=None, i64_byte_map=None, double_byte_map=None, string_byte_map=None, binary_byte_map=None, boolean_byte_map=None, byte_i16_map=None, byte_i32_map=None, byte_i64_map=None, byte_double_map=None, byte_string_map=None, byte_binary_map=None, byte_boolean_map=None, list_byte_map=None, set_byte_map=None, map_byte_map=None, byte_map_map=None, byte_set_map=None, byte_list_map=None,):
        self.a_byte = a_byte
        self.a_i16 = a_i16
        self.a_i32 = a_i32
        self.a_i64 = a_i64
        self.a_double = a_double
        self.a_string = a_string
        self.a_binary = a_binary
        self.true_field = true_field
        self.false_field = false_field
        self.empty_struct_field = empty_struct_field
        self.byte_list = byte_list
        self.i16_list = i16_list
        self.i32_list = i32_list
        self.i64_list = i64_list
        self.double_list = double_list
        self.string_list = string_list
        self.binary_list = binary_list
        self.boolean_list = boolean_list
        self.struct_list = struct_list
        self.byte_set = byte_set
        self.i16_set = i16_set
        self.i32_set = i32_set
        self.i64_set = i64_set
        self.double_set = double_set
        self.string_set = string_set
        self.binary_set = binary_set
        self.boolean_set = boolean_set
        self.struct_set = struct_set
        self.byte_byte_map = byte_byte_map
        self.i16_byte_map = i16_byte_map
        self.i32_byte_map = i32_byte_map
        self.i64_byte_map = i64_byte_map
        self.double_byte_map = double_byte_map
        self.string_byte_map = string_byte_map
        self.binary_byte_map = binary_byte_map
        self.boolean_byte_map = boolean_byte_map
        self.byte_i16_map = byte_i16_map
        self.byte_i32_map = byte_i32_map
        self.byte_i64_map = byte_i64_map
        self.byte_double_map = byte_double_map
        self.byte_string_map = byte_string_map
        self.byte_binary_map = byte_binary_map
        self.byte_boolean_map = byte_boolean_map
        self.list_byte_map = list_byte_map
        self.set_byte_map = set_byte_map
        self.map_byte_map = map_byte_map
        self.byte_map_map = byte_map_map
        self.byte_set_map = byte_set_map
        self.byte_list_map = byte_list_map

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.a_byte = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.a_i16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.a_i32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.a_i64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.a_double = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.a_string = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.a_binary = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.true_field = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.false_field = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.empty_struct_field = Empty.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.byte_list = []
                    (_etype77, _size74) = iprot.readListBegin()
                    for _i78 in range(_size74):
                        _elem79 = iprot.readByte()
                        self.byte_list.append(_elem79)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.i16_list = []
                    (_etype83, _size80) = iprot.readListBegin()
                    for _i84 in range(_size80):
                        _elem85 = iprot.readI16()
                        self.i16_list.append(_elem85)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.i32_list = []
                    (_etype89, _size86) = iprot.readListBegin()
                    for _i90 in range(_size86):
                        _elem91 = iprot.readI32()
                        self.i32_list.append(_elem91)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.i64_list = []
                    (_etype95, _size92) = iprot.readListBegin()
                    for _i96 in range(_size92):
                        _elem97 = iprot.readI64()
                        self.i64_list.append(_elem97)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.double_list = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readDouble()
                        self.double_list.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.string_list = []
                    (_etype107, _size104) = iprot.readListBegin()
                    for _i108 in range(_size104):
                        _elem109 = iprot.readString()
                        self.string_list.append(_elem109)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.binary_list = []
                    (_etype113, _size110) = iprot.readListBegin()
                    for _i114 in range(_size110):
                        _elem115 = iprot.readBinary()
                        self.binary_list.append(_elem115)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.boolean_list = []
                    (_etype119, _size116) = iprot.readListBegin()
                    for _i120 in range(_size116):
                        _elem121 = iprot.readBool()
                        self.boolean_list.append(_elem121)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.LIST:
                    self.struct_list = []
                    (_etype125, _size122) = iprot.readListBegin()
                    for _i126 in range(_size122):
                        _elem127 = Empty.read(iprot)
                        self.struct_list.append(_elem127)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.SET:
                    self.byte_set = set()
                    (_etype131, _size128) = iprot.readSetBegin()
                    for _i132 in range(_size128):
                        _elem133 = iprot.readByte()
                        self.byte_set.add(_elem133)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.SET:
                    self.i16_set = set()
                    (_etype137, _size134) = iprot.readSetBegin()
                    for _i138 in range(_size134):
                        _elem139 = iprot.readI16()
                        self.i16_set.add(_elem139)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.SET:
                    self.i32_set = set()
                    (_etype143, _size140) = iprot.readSetBegin()
                    for _i144 in range(_size140):
                        _elem145 = iprot.readI32()
                        self.i32_set.add(_elem145)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.SET:
                    self.i64_set = set()
                    (_etype149, _size146) = iprot.readSetBegin()
                    for _i150 in range(_size146):
                        _elem151 = iprot.readI64()
                        self.i64_set.add(_elem151)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.SET:
                    self.double_set = set()
                    (_etype155, _size152) = iprot.readSetBegin()
                    for _i156 in range(_size152):
                        _elem157 = iprot.readDouble()
                        self.double_set.add(_elem157)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.SET:
                    self.string_set = set()
                    (_etype161, _size158) = iprot.readSetBegin()
                    for _i162 in range(_size158):
                        _elem163 = iprot.readString()
                        self.string_set.add(_elem163)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.SET:
                    self.binary_set = set()
                    (_etype167, _size164) = iprot.readSetBegin()
                    for _i168 in range(_size164):
                        _elem169 = iprot.readBinary()
                        self.binary_set.add(_elem169)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.SET:
                    self.boolean_set = set()
                    (_etype173, _size170) = iprot.readSetBegin()
                    for _i174 in range(_size170):
                        _elem175 = iprot.readBool()
                        self.boolean_set.add(_elem175)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.SET:
                    self.struct_set = set()
                    (_etype179, _size176) = iprot.readSetBegin()
                    for _i180 in range(_size176):
                        _elem181 = Empty.read(iprot)
                        self.struct_set.add(_elem181)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.MAP:
                    self.byte_byte_map = {}
                    (_ktype183, _vtype184, _size182) = iprot.readMapBegin()
                    for _i186 in range(_size182):
                        _key187 = iprot.readByte()
                        _val188 = iprot.readByte()
                        self.byte_byte_map[_key187] = _val188
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.MAP:
                    self.i16_byte_map = {}
                    (_ktype190, _vtype191, _size189) = iprot.readMapBegin()
                    for _i193 in range(_size189):
                        _key194 = iprot.readI16()
                        _val195 = iprot.readByte()
                        self.i16_byte_map[_key194] = _val195
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.MAP:
                    self.i32_byte_map = {}
                    (_ktype197, _vtype198, _size196) = iprot.readMapBegin()
                    for _i200 in range(_size196):
                        _key201 = iprot.readI32()
                        _val202 = iprot.readByte()
                        self.i32_byte_map[_key201] = _val202
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.MAP:
                    self.i64_byte_map = {}
                    (_ktype204, _vtype205, _size203) = iprot.readMapBegin()
                    for _i207 in range(_size203):
                        _key208 = iprot.readI64()
                        _val209 = iprot.readByte()
                        self.i64_byte_map[_key208] = _val209
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.MAP:
                    self.double_byte_map = {}
                    (_ktype211, _vtype212, _size210) = iprot.readMapBegin()
                    for _i214 in range(_size210):
                        _key215 = iprot.readDouble()
                        _val216 = iprot.readByte()
                        self.double_byte_map[_key215] = _val216
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.MAP:
                    self.string_byte_map = {}
                    (_ktype218, _vtype219, _size217) = iprot.readMapBegin()
                    for _i221 in range(_size217):
                        _key222 = iprot.readString()
                        _val223 = iprot.readByte()
                        self.string_byte_map[_key222] = _val223
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.MAP:
                    self.binary_byte_map = {}
                    (_ktype225, _vtype226, _size224) = iprot.readMapBegin()
                    for _i228 in range(_size224):
                        _key229 = iprot.readBinary()
                        _val230 = iprot.readByte()
                        self.binary_byte_map[_key229] = _val230
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.MAP:
                    self.boolean_byte_map = {}
                    (_ktype232, _vtype233, _size231) = iprot.readMapBegin()
                    for _i235 in range(_size231):
                        _key236 = iprot.readBool()
                        _val237 = iprot.readByte()
                        self.boolean_byte_map[_key236] = _val237
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.MAP:
                    self.byte_i16_map = {}
                    (_ktype239, _vtype240, _size238) = iprot.readMapBegin()
                    for _i242 in range(_size238):
                        _key243 = iprot.readByte()
                        _val244 = iprot.readI16()
                        self.byte_i16_map[_key243] = _val244
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.MAP:
                    self.byte_i32_map = {}
                    (_ktype246, _vtype247, _size245) = iprot.readMapBegin()
                    for _i249 in range(_size245):
                        _key250 = iprot.readByte()
                        _val251 = iprot.readI32()
                        self.byte_i32_map[_key250] = _val251
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.MAP:
                    self.byte_i64_map = {}
                    (_ktype253, _vtype254, _size252) = iprot.readMapBegin()
                    for _i256 in range(_size252):
                        _key257 = iprot.readByte()
                        _val258 = iprot.readI64()
                        self.byte_i64_map[_key257] = _val258
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.MAP:
                    self.byte_double_map = {}
                    (_ktype260, _vtype261, _size259) = iprot.readMapBegin()
                    for _i263 in range(_size259):
                        _key264 = iprot.readByte()
                        _val265 = iprot.readDouble()
                        self.byte_double_map[_key264] = _val265
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.MAP:
                    self.byte_string_map = {}
                    (_ktype267, _vtype268, _size266) = iprot.readMapBegin()
                    for _i270 in range(_size266):
                        _key271 = iprot.readByte()
                        _val272 = iprot.readString()
                        self.byte_string_map[_key271] = _val272
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.MAP:
                    self.byte_binary_map = {}
                    (_ktype274, _vtype275, _size273) = iprot.readMapBegin()
                    for _i277 in range(_size273):
                        _key278 = iprot.readByte()
                        _val279 = iprot.readBinary()
                        self.byte_binary_map[_key278] = _val279
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.MAP:
                    self.byte_boolean_map = {}
                    (_ktype281, _vtype282, _size280) = iprot.readMapBegin()
                    for _i284 in range(_size280):
                        _key285 = iprot.readByte()
                        _val286 = iprot.readBool()
                        self.byte_boolean_map[_key285] = _val286
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.MAP:
                    self.list_byte_map = {}
                    (_ktype288, _vtype289, _size287) = iprot.readMapBegin()
                    for _i291 in range(_size287):
                        _key292 = []
                        (_etype297, _size294) = iprot.readListBegin()
                        for _i298 in range(_size294):
                            _elem299 = iprot.readByte()
                            _key292.append(_elem299)
                        _key292 = tuple(_key292)
                        iprot.readListEnd()
                        _val293 = iprot.readByte()
                        self.list_byte_map[_key292] = _val293
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.MAP:
                    self.set_byte_map = {}
                    (_ktype301, _vtype302, _size300) = iprot.readMapBegin()
                    for _i304 in range(_size300):
                        _key305 = set()
                        (_etype310, _size307) = iprot.readSetBegin()
                        for _i311 in range(_size307):
                            _elem312 = iprot.readByte()
                            _key305.add(_elem312)
                        iprot.readSetEnd()
                        _key305 = frozenset(_key305)
                        _val306 = iprot.readByte()
                        self.set_byte_map[_key305] = _val306
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.MAP:
                    self.map_byte_map = {}
                    (_ktype314, _vtype315, _size313) = iprot.readMapBegin()
                    for _i317 in range(_size313):
                        _key318 = {}
                        (_ktype321, _vtype322, _size320) = iprot.readMapBegin()
                        for _i324 in range(_size320):
                            _key325 = iprot.readByte()
                            _val326 = iprot.readByte()
                            _key318[_key325] = _val326
                        iprot.readMapEnd()
                        _key318 = TFrozenDict(_key318)
                        _val319 = iprot.readByte()
                        self.map_byte_map[_key318] = _val319
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.MAP:
                    self.byte_map_map = {}
                    (_ktype328, _vtype329, _size327) = iprot.readMapBegin()
                    for _i331 in range(_size327):
                        _key332 = iprot.readByte()
                        _val333 = {}
                        (_ktype335, _vtype336, _size334) = iprot.readMapBegin()
                        for _i338 in range(_size334):
                            _key339 = iprot.readByte()
                            _val340 = iprot.readByte()
                            _val333[_key339] = _val340
                        iprot.readMapEnd()
                        self.byte_map_map[_key332] = _val333
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.MAP:
                    self.byte_set_map = {}
                    (_ktype342, _vtype343, _size341) = iprot.readMapBegin()
                    for _i345 in range(_size341):
                        _key346 = iprot.readByte()
                        _val347 = set()
                        (_etype351, _size348) = iprot.readSetBegin()
                        for _i352 in range(_size348):
                            _elem353 = iprot.readByte()
                            _val347.add(_elem353)
                        iprot.readSetEnd()
                        self.byte_set_map[_key346] = _val347
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.MAP:
                    self.byte_list_map = {}
                    (_ktype355, _vtype356, _size354) = iprot.readMapBegin()
                    for _i358 in range(_size354):
                        _key359 = iprot.readByte()
                        _val360 = []
                        (_etype364, _size361) = iprot.readListBegin()
                        for _i365 in range(_size361):
                            _elem366 = iprot.readByte()
                            _val360.append(_elem366)
                        iprot.readListEnd()
                        self.byte_list_map[_key359] = _val360
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CompactProtoTestStruct')
        if self.a_byte is not None:
            oprot.writeFieldBegin('a_byte', TType.BYTE, 1)
            oprot.writeByte(self.a_byte)
            oprot.writeFieldEnd()
        if self.a_i16 is not None:
            oprot.writeFieldBegin('a_i16', TType.I16, 2)
            oprot.writeI16(self.a_i16)
            oprot.writeFieldEnd()
        if self.a_i32 is not None:
            oprot.writeFieldBegin('a_i32', TType.I32, 3)
            oprot.writeI32(self.a_i32)
            oprot.writeFieldEnd()
        if self.a_i64 is not None:
            oprot.writeFieldBegin('a_i64', TType.I64, 4)
            oprot.writeI64(self.a_i64)
            oprot.writeFieldEnd()
        if self.a_double is not None:
            oprot.writeFieldBegin('a_double', TType.DOUBLE, 5)
            oprot.writeDouble(self.a_double)
            oprot.writeFieldEnd()
        if self.a_string is not None:
            oprot.writeFieldBegin('a_string', TType.STRING, 6)
            oprot.writeString(self.a_string)
            oprot.writeFieldEnd()
        if self.a_binary is not None:
            oprot.writeFieldBegin('a_binary', TType.STRING, 7)
            oprot.writeBinary(self.a_binary)
            oprot.writeFieldEnd()
        if self.true_field is not None:
            oprot.writeFieldBegin('true_field', TType.BOOL, 8)
            oprot.writeBool(self.true_field)
            oprot.writeFieldEnd()
        if self.false_field is not None:
            oprot.writeFieldBegin('false_field', TType.BOOL, 9)
            oprot.writeBool(self.false_field)
            oprot.writeFieldEnd()
        if self.empty_struct_field is not None:
            oprot.writeFieldBegin('empty_struct_field', TType.STRUCT, 10)
            self.empty_struct_field.write(oprot)
            oprot.writeFieldEnd()
        if self.byte_list is not None:
            oprot.writeFieldBegin('byte_list', TType.LIST, 11)
            oprot.writeListBegin(TType.BYTE, len(self.byte_list))
            for iter367 in self.byte_list:
                oprot.writeByte(iter367)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i16_list is not None:
            oprot.writeFieldBegin('i16_list', TType.LIST, 12)
            oprot.writeListBegin(TType.I16, len(self.i16_list))
            for iter368 in self.i16_list:
                oprot.writeI16(iter368)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i32_list is not None:
            oprot.writeFieldBegin('i32_list', TType.LIST, 13)
            oprot.writeListBegin(TType.I32, len(self.i32_list))
            for iter369 in self.i32_list:
                oprot.writeI32(iter369)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i64_list is not None:
            oprot.writeFieldBegin('i64_list', TType.LIST, 14)
            oprot.writeListBegin(TType.I64, len(self.i64_list))
            for iter370 in self.i64_list:
                oprot.writeI64(iter370)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.double_list is not None:
            oprot.writeFieldBegin('double_list', TType.LIST, 15)
            oprot.writeListBegin(TType.DOUBLE, len(self.double_list))
            for iter371 in self.double_list:
                oprot.writeDouble(iter371)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.string_list is not None:
            oprot.writeFieldBegin('string_list', TType.LIST, 16)
            oprot.writeListBegin(TType.STRING, len(self.string_list))
            for iter372 in self.string_list:
                oprot.writeString(iter372)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.binary_list is not None:
            oprot.writeFieldBegin('binary_list', TType.LIST, 17)
            oprot.writeListBegin(TType.STRING, len(self.binary_list))
            for iter373 in self.binary_list:
                oprot.writeBinary(iter373)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.boolean_list is not None:
            oprot.writeFieldBegin('boolean_list', TType.LIST, 18)
            oprot.writeListBegin(TType.BOOL, len(self.boolean_list))
            for iter374 in self.boolean_list:
                oprot.writeBool(iter374)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.struct_list is not None:
            oprot.writeFieldBegin('struct_list', TType.LIST, 19)
            oprot.writeListBegin(TType.STRUCT, len(self.struct_list))
            for iter375 in self.struct_list:
                iter375.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.byte_set is not None:
            oprot.writeFieldBegin('byte_set', TType.SET, 20)
            oprot.writeSetBegin(TType.BYTE, len(self.byte_set))
            for iter376 in self.byte_set:
                oprot.writeByte(iter376)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.i16_set is not None:
            oprot.writeFieldBegin('i16_set', TType.SET, 21)
            oprot.writeSetBegin(TType.I16, len(self.i16_set))
            for iter377 in self.i16_set:
                oprot.writeI16(iter377)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.i32_set is not None:
            oprot.writeFieldBegin('i32_set', TType.SET, 22)
            oprot.writeSetBegin(TType.I32, len(self.i32_set))
            for iter378 in self.i32_set:
                oprot.writeI32(iter378)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.i64_set is not None:
            oprot.writeFieldBegin('i64_set', TType.SET, 23)
            oprot.writeSetBegin(TType.I64, len(self.i64_set))
            for iter379 in self.i64_set:
                oprot.writeI64(iter379)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.double_set is not None:
            oprot.writeFieldBegin('double_set', TType.SET, 24)
            oprot.writeSetBegin(TType.DOUBLE, len(self.double_set))
            for iter380 in self.double_set:
                oprot.writeDouble(iter380)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.string_set is not None:
            oprot.writeFieldBegin('string_set', TType.SET, 25)
            oprot.writeSetBegin(TType.STRING, len(self.string_set))
            for iter381 in self.string_set:
                oprot.writeString(iter381)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.binary_set is not None:
            oprot.writeFieldBegin('binary_set', TType.SET, 26)
            oprot.writeSetBegin(TType.STRING, len(self.binary_set))
            for iter382 in self.binary_set:
                oprot.writeBinary(iter382)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.boolean_set is not None:
            oprot.writeFieldBegin('boolean_set', TType.SET, 27)
            oprot.writeSetBegin(TType.BOOL, len(self.boolean_set))
            for iter383 in self.boolean_set:
                oprot.writeBool(iter383)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.struct_set is not None:
            oprot.writeFieldBegin('struct_set', TType.SET, 28)
            oprot.writeSetBegin(TType.STRUCT, len(self.struct_set))
            for iter384 in self.struct_set:
                iter384.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.byte_byte_map is not None:
            oprot.writeFieldBegin('byte_byte_map', TType.MAP, 29)
            oprot.writeMapBegin(TType.BYTE, TType.BYTE, len(self.byte_byte_map))
            for kiter385, viter386 in self.byte_byte_map.items():
                oprot.writeByte(kiter385)
                oprot.writeByte(viter386)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.i16_byte_map is not None:
            oprot.writeFieldBegin('i16_byte_map', TType.MAP, 30)
            oprot.writeMapBegin(TType.I16, TType.BYTE, len(self.i16_byte_map))
            for kiter387, viter388 in self.i16_byte_map.items():
                oprot.writeI16(kiter387)
                oprot.writeByte(viter388)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.i32_byte_map is not None:
            oprot.writeFieldBegin('i32_byte_map', TType.MAP, 31)
            oprot.writeMapBegin(TType.I32, TType.BYTE, len(self.i32_byte_map))
            for kiter389, viter390 in self.i32_byte_map.items():
                oprot.writeI32(kiter389)
                oprot.writeByte(viter390)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.i64_byte_map is not None:
            oprot.writeFieldBegin('i64_byte_map', TType.MAP, 32)
            oprot.writeMapBegin(TType.I64, TType.BYTE, len(self.i64_byte_map))
            for kiter391, viter392 in self.i64_byte_map.items():
                oprot.writeI64(kiter391)
                oprot.writeByte(viter392)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.double_byte_map is not None:
            oprot.writeFieldBegin('double_byte_map', TType.MAP, 33)
            oprot.writeMapBegin(TType.DOUBLE, TType.BYTE, len(self.double_byte_map))
            for kiter393, viter394 in self.double_byte_map.items():
                oprot.writeDouble(kiter393)
                oprot.writeByte(viter394)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.string_byte_map is not None:
            oprot.writeFieldBegin('string_byte_map', TType.MAP, 34)
            oprot.writeMapBegin(TType.STRING, TType.BYTE, len(self.string_byte_map))
            for kiter395, viter396 in self.string_byte_map.items():
                oprot.writeString(kiter395)
                oprot.writeByte(viter396)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.binary_byte_map is not None:
            oprot.writeFieldBegin('binary_byte_map', TType.MAP, 35)
            oprot.writeMapBegin(TType.STRING, TType.BYTE, len(self.binary_byte_map))
            for kiter397, viter398 in self.binary_byte_map.items():
                oprot.writeBinary(kiter397)
                oprot.writeByte(viter398)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.boolean_byte_map is not None:
            oprot.writeFieldBegin('boolean_byte_map', TType.MAP, 36)
            oprot.writeMapBegin(TType.BOOL, TType.BYTE, len(self.boolean_byte_map))
            for kiter399, viter400 in self.boolean_byte_map.items():
                oprot.writeBool(kiter399)
                oprot.writeByte(viter400)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_i16_map is not None:
            oprot.writeFieldBegin('byte_i16_map', TType.MAP, 37)
            oprot.writeMapBegin(TType.BYTE, TType.I16, len(self.byte_i16_map))
            for kiter401, viter402 in self.byte_i16_map.items():
                oprot.writeByte(kiter401)
                oprot.writeI16(viter402)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_i32_map is not None:
            oprot.writeFieldBegin('byte_i32_map', TType.MAP, 38)
            oprot.writeMapBegin(TType.BYTE, TType.I32, len(self.byte_i32_map))
            for kiter403, viter404 in self.byte_i32_map.items():
                oprot.writeByte(kiter403)
                oprot.writeI32(viter404)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_i64_map is not None:
            oprot.writeFieldBegin('byte_i64_map', TType.MAP, 39)
            oprot.writeMapBegin(TType.BYTE, TType.I64, len(self.byte_i64_map))
            for kiter405, viter406 in self.byte_i64_map.items():
                oprot.writeByte(kiter405)
                oprot.writeI64(viter406)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_double_map is not None:
            oprot.writeFieldBegin('byte_double_map', TType.MAP, 40)
            oprot.writeMapBegin(TType.BYTE, TType.DOUBLE, len(self.byte_double_map))
            for kiter407, viter408 in self.byte_double_map.items():
                oprot.writeByte(kiter407)
                oprot.writeDouble(viter408)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_string_map is not None:
            oprot.writeFieldBegin('byte_string_map', TType.MAP, 41)
            oprot.writeMapBegin(TType.BYTE, TType.STRING, len(self.byte_string_map))
            for kiter409, viter410 in self.byte_string_map.items():
                oprot.writeByte(kiter409)
                oprot.writeString(viter410)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_binary_map is not None:
            oprot.writeFieldBegin('byte_binary_map', TType.MAP, 42)
            oprot.writeMapBegin(TType.BYTE, TType.STRING, len(self.byte_binary_map))
            for kiter411, viter412 in self.byte_binary_map.items():
                oprot.writeByte(kiter411)
                oprot.writeBinary(viter412)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_boolean_map is not None:
            oprot.writeFieldBegin('byte_boolean_map', TType.MAP, 43)
            oprot.writeMapBegin(TType.BYTE, TType.BOOL, len(self.byte_boolean_map))
            for kiter413, viter414 in self.byte_boolean_map.items():
                oprot.writeByte(kiter413)
                oprot.writeBool(viter414)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.list_byte_map is not None:
            oprot.writeFieldBegin('list_byte_map', TType.MAP, 44)
            oprot.writeMapBegin(TType.LIST, TType.BYTE, len(self.list_byte_map))
            for kiter415, viter416 in self.list_byte_map.items():
                oprot.writeListBegin(TType.BYTE, len(kiter415))
                for iter417 in kiter415:
                    oprot.writeByte(iter417)
                oprot.writeListEnd()
                oprot.writeByte(viter416)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.set_byte_map is not None:
            oprot.writeFieldBegin('set_byte_map', TType.MAP, 45)
            oprot.writeMapBegin(TType.SET, TType.BYTE, len(self.set_byte_map))
            for kiter418, viter419 in self.set_byte_map.items():
                oprot.writeSetBegin(TType.BYTE, len(kiter418))
                for iter420 in kiter418:
                    oprot.writeByte(iter420)
                oprot.writeSetEnd()
                oprot.writeByte(viter419)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.map_byte_map is not None:
            oprot.writeFieldBegin('map_byte_map', TType.MAP, 46)
            oprot.writeMapBegin(TType.MAP, TType.BYTE, len(self.map_byte_map))
            for kiter421, viter422 in self.map_byte_map.items():
                oprot.writeMapBegin(TType.BYTE, TType.BYTE, len(kiter421))
                for kiter423, viter424 in kiter421.items():
                    oprot.writeByte(kiter423)
                    oprot.writeByte(viter424)
                oprot.writeMapEnd()
                oprot.writeByte(viter422)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_map_map is not None:
            oprot.writeFieldBegin('byte_map_map', TType.MAP, 47)
            oprot.writeMapBegin(TType.BYTE, TType.MAP, len(self.byte_map_map))
            for kiter425, viter426 in self.byte_map_map.items():
                oprot.writeByte(kiter425)
                oprot.writeMapBegin(TType.BYTE, TType.BYTE, len(viter426))
                for kiter427, viter428 in viter426.items():
                    oprot.writeByte(kiter427)
                    oprot.writeByte(viter428)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_set_map is not None:
            oprot.writeFieldBegin('byte_set_map', TType.MAP, 48)
            oprot.writeMapBegin(TType.BYTE, TType.SET, len(self.byte_set_map))
            for kiter429, viter430 in self.byte_set_map.items():
                oprot.writeByte(kiter429)
                oprot.writeSetBegin(TType.BYTE, len(viter430))
                for iter431 in viter430:
                    oprot.writeByte(iter431)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.byte_list_map is not None:
            oprot.writeFieldBegin('byte_list_map', TType.MAP, 49)
            oprot.writeMapBegin(TType.BYTE, TType.LIST, len(self.byte_list_map))
            for kiter432, viter433 in self.byte_list_map.items():
                oprot.writeByte(kiter432)
                oprot.writeListBegin(TType.BYTE, len(viter433))
                for iter434 in viter433:
                    oprot.writeByte(iter434)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SingleMapTestStruct(object):
    """
    Attributes:
     - i32_map
    """


    def __init__(self, i32_map=None,):
        self.i32_map = i32_map

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.i32_map = {}
                    (_ktype436, _vtype437, _size435) = iprot.readMapBegin()
                    for _i439 in range(_size435):
                        _key440 = iprot.readI32()
                        _val441 = iprot.readI32()
                        self.i32_map[_key440] = _val441
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SingleMapTestStruct')
        if self.i32_map is not None:
            oprot.writeFieldBegin('i32_map', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.i32_map))
            for kiter442, viter443 in self.i32_map.items():
                oprot.writeI32(kiter442)
                oprot.writeI32(viter443)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.i32_map is None:
            raise TProtocolException(message='Required field i32_map is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExceptionWithAMap(TException):
    """
    Attributes:
     - blah
     - map_field
    """


    def __init__(self, blah=None, map_field=None,):
        self.blah = blah
        self.map_field = map_field

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.blah = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.map_field = {}
                    (_ktype445, _vtype446, _size444) = iprot.readMapBegin()
                    for _i448 in range(_size444):
                        _key449 = iprot.readString()
                        _val450 = iprot.readString()
                        self.map_field[_key449] = _val450
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExceptionWithAMap')
        if self.blah is not None:
            oprot.writeFieldBegin('blah', TType.STRING, 1)
            oprot.writeString(self.blah)
            oprot.writeFieldEnd()
        if self.map_field is not None:
            oprot.writeFieldBegin('map_field', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.map_field))
            for kiter451, viter452 in self.map_field.items():
                oprot.writeString(kiter451)
                oprot.writeString(viter452)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BlowUp(object):
    """
    Attributes:
     - b1
     - b2
     - b3
     - b4
    """


    def __init__(self, b1=None, b2=None, b3=None, b4=None,):
        self.b1 = b1
        self.b2 = b2
        self.b3 = b3
        self.b4 = b4

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.b1 = {}
                    (_ktype454, _vtype455, _size453) = iprot.readMapBegin()
                    for _i457 in range(_size453):
                        _key458 = []
                        (_etype463, _size460) = iprot.readListBegin()
                        for _i464 in range(_size460):
                            _elem465 = iprot.readI32()
                            _key458.append(_elem465)
                        _key458 = tuple(_key458)
                        iprot.readListEnd()
                        _val459 = set()
                        (_etype469, _size466) = iprot.readSetBegin()
                        for _i470 in range(_size466):
                            _elem471 = {}
                            (_ktype473, _vtype474, _size472) = iprot.readMapBegin()
                            for _i476 in range(_size472):
                                _key477 = iprot.readI32()
                                _val478 = iprot.readString()
                                _elem471[_key477] = _val478
                            iprot.readMapEnd()
                            _elem471 = TFrozenDict(_elem471)
                            _val459.add(_elem471)
                        iprot.readSetEnd()
                        self.b1[_key458] = _val459
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.b2 = {}
                    (_ktype480, _vtype481, _size479) = iprot.readMapBegin()
                    for _i483 in range(_size479):
                        _key484 = []
                        (_etype489, _size486) = iprot.readListBegin()
                        for _i490 in range(_size486):
                            _elem491 = iprot.readI32()
                            _key484.append(_elem491)
                        _key484 = tuple(_key484)
                        iprot.readListEnd()
                        _val485 = set()
                        (_etype495, _size492) = iprot.readSetBegin()
                        for _i496 in range(_size492):
                            _elem497 = {}
                            (_ktype499, _vtype500, _size498) = iprot.readMapBegin()
                            for _i502 in range(_size498):
                                _key503 = iprot.readI32()
                                _val504 = iprot.readString()
                                _elem497[_key503] = _val504
                            iprot.readMapEnd()
                            _elem497 = TFrozenDict(_elem497)
                            _val485.add(_elem497)
                        iprot.readSetEnd()
                        self.b2[_key484] = _val485
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.b3 = {}
                    (_ktype506, _vtype507, _size505) = iprot.readMapBegin()
                    for _i509 in range(_size505):
                        _key510 = []
                        (_etype515, _size512) = iprot.readListBegin()
                        for _i516 in range(_size512):
                            _elem517 = iprot.readI32()
                            _key510.append(_elem517)
                        _key510 = tuple(_key510)
                        iprot.readListEnd()
                        _val511 = set()
                        (_etype521, _size518) = iprot.readSetBegin()
                        for _i522 in range(_size518):
                            _elem523 = {}
                            (_ktype525, _vtype526, _size524) = iprot.readMapBegin()
                            for _i528 in range(_size524):
                                _key529 = iprot.readI32()
                                _val530 = iprot.readString()
                                _elem523[_key529] = _val530
                            iprot.readMapEnd()
                            _elem523 = TFrozenDict(_elem523)
                            _val511.add(_elem523)
                        iprot.readSetEnd()
                        self.b3[_key510] = _val511
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.b4 = {}
                    (_ktype532, _vtype533, _size531) = iprot.readMapBegin()
                    for _i535 in range(_size531):
                        _key536 = []
                        (_etype541, _size538) = iprot.readListBegin()
                        for _i542 in range(_size538):
                            _elem543 = iprot.readI32()
                            _key536.append(_elem543)
                        _key536 = tuple(_key536)
                        iprot.readListEnd()
                        _val537 = set()
                        (_etype547, _size544) = iprot.readSetBegin()
                        for _i548 in range(_size544):
                            _elem549 = {}
                            (_ktype551, _vtype552, _size550) = iprot.readMapBegin()
                            for _i554 in range(_size550):
                                _key555 = iprot.readI32()
                                _val556 = iprot.readString()
                                _elem549[_key555] = _val556
                            iprot.readMapEnd()
                            _elem549 = TFrozenDict(_elem549)
                            _val537.add(_elem549)
                        iprot.readSetEnd()
                        self.b4[_key536] = _val537
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BlowUp')
        if self.b1 is not None:
            oprot.writeFieldBegin('b1', TType.MAP, 1)
            oprot.writeMapBegin(TType.LIST, TType.SET, len(self.b1))
            for kiter557, viter558 in self.b1.items():
                oprot.writeListBegin(TType.I32, len(kiter557))
                for iter559 in kiter557:
                    oprot.writeI32(iter559)
                oprot.writeListEnd()
                oprot.writeSetBegin(TType.MAP, len(viter558))
                for iter560 in viter558:
                    oprot.writeMapBegin(TType.I32, TType.STRING, len(iter560))
                    for kiter561, viter562 in iter560.items():
                        oprot.writeI32(kiter561)
                        oprot.writeString(viter562)
                    oprot.writeMapEnd()
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.b2 is not None:
            oprot.writeFieldBegin('b2', TType.MAP, 2)
            oprot.writeMapBegin(TType.LIST, TType.SET, len(self.b2))
            for kiter563, viter564 in self.b2.items():
                oprot.writeListBegin(TType.I32, len(kiter563))
                for iter565 in kiter563:
                    oprot.writeI32(iter565)
                oprot.writeListEnd()
                oprot.writeSetBegin(TType.MAP, len(viter564))
                for iter566 in viter564:
                    oprot.writeMapBegin(TType.I32, TType.STRING, len(iter566))
                    for kiter567, viter568 in iter566.items():
                        oprot.writeI32(kiter567)
                        oprot.writeString(viter568)
                    oprot.writeMapEnd()
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.b3 is not None:
            oprot.writeFieldBegin('b3', TType.MAP, 3)
            oprot.writeMapBegin(TType.LIST, TType.SET, len(self.b3))
            for kiter569, viter570 in self.b3.items():
                oprot.writeListBegin(TType.I32, len(kiter569))
                for iter571 in kiter569:
                    oprot.writeI32(iter571)
                oprot.writeListEnd()
                oprot.writeSetBegin(TType.MAP, len(viter570))
                for iter572 in viter570:
                    oprot.writeMapBegin(TType.I32, TType.STRING, len(iter572))
                    for kiter573, viter574 in iter572.items():
                        oprot.writeI32(kiter573)
                        oprot.writeString(viter574)
                    oprot.writeMapEnd()
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.b4 is not None:
            oprot.writeFieldBegin('b4', TType.MAP, 4)
            oprot.writeMapBegin(TType.LIST, TType.SET, len(self.b4))
            for kiter575, viter576 in self.b4.items():
                oprot.writeListBegin(TType.I32, len(kiter575))
                for iter577 in kiter575:
                    oprot.writeI32(iter577)
                oprot.writeListEnd()
                oprot.writeSetBegin(TType.MAP, len(viter576))
                for iter578 in viter576:
                    oprot.writeMapBegin(TType.I32, TType.STRING, len(iter578))
                    for kiter579, viter580 in iter578.items():
                        oprot.writeI32(kiter579)
                        oprot.writeString(viter580)
                    oprot.writeMapEnd()
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReverseOrderStruct(object):
    """
    Attributes:
     - first
     - second
     - third
     - fourth
    """


    def __init__(self, first=None, second=None, third=None, fourth=None,):
        self.first = first
        self.second = second
        self.third = third
        self.fourth = fourth

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 4:
                if ftype == TType.STRING:
                    self.first = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.second = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.third = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.I64:
                    self.fourth = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReverseOrderStruct')
        if self.fourth is not None:
            oprot.writeFieldBegin('fourth', TType.I64, 1)
            oprot.writeI64(self.fourth)
            oprot.writeFieldEnd()
        if self.third is not None:
            oprot.writeFieldBegin('third', TType.I32, 2)
            oprot.writeI32(self.third)
            oprot.writeFieldEnd()
        if self.second is not None:
            oprot.writeFieldBegin('second', TType.I16, 3)
            oprot.writeI16(self.second)
            oprot.writeFieldEnd()
        if self.first is not None:
            oprot.writeFieldBegin('first', TType.STRING, 4)
            oprot.writeString(self.first)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StructWithSomeEnum(object):
    """
    Attributes:
     - blah
    """


    def __init__(self, blah=None,):
        self.blah = blah

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.blah = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StructWithSomeEnum')
        if self.blah is not None:
            oprot.writeFieldBegin('blah', TType.I32, 1)
            oprot.writeI32(self.blah)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TestUnion(object):
    """
    Attributes:
     - string_field: A doc string
     - i32_field
     - struct_field
     - struct_list
     - other_i32_field
     - enum_field
     - i32_set
     - i32_map
    """


    def __init__(self, string_field=None, i32_field=None, struct_field=None, struct_list=None, other_i32_field=None, enum_field=None, i32_set=None, i32_map=None,):
        self.string_field = string_field
        self.i32_field = i32_field
        self.struct_field = struct_field
        self.struct_list = struct_list
        self.other_i32_field = other_i32_field
        self.enum_field = enum_field
        self.i32_set = i32_set
        self.i32_map = i32_map

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.string_field = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.i32_field = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.struct_field = OneOfEach()
                    self.struct_field.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.struct_list = []
                    (_etype584, _size581) = iprot.readListBegin()
                    for _i585 in range(_size581):
                        _elem586 = RandomStuff()
                        _elem586.read(iprot)
                        self.struct_list.append(_elem586)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.other_i32_field = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.enum_field = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.SET:
                    self.i32_set = set()
                    (_etype590, _size587) = iprot.readSetBegin()
                    for _i591 in range(_size587):
                        _elem592 = iprot.readI32()
                        self.i32_set.add(_elem592)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.i32_map = {}
                    (_ktype594, _vtype595, _size593) = iprot.readMapBegin()
                    for _i597 in range(_size593):
                        _key598 = iprot.readI32()
                        _val599 = iprot.readI32()
                        self.i32_map[_key598] = _val599
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TestUnion')
        if self.string_field is not None:
            oprot.writeFieldBegin('string_field', TType.STRING, 1)
            oprot.writeString(self.string_field)
            oprot.writeFieldEnd()
        if self.i32_field is not None:
            oprot.writeFieldBegin('i32_field', TType.I32, 2)
            oprot.writeI32(self.i32_field)
            oprot.writeFieldEnd()
        if self.struct_field is not None:
            oprot.writeFieldBegin('struct_field', TType.STRUCT, 3)
            self.struct_field.write(oprot)
            oprot.writeFieldEnd()
        if self.struct_list is not None:
            oprot.writeFieldBegin('struct_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.struct_list))
            for iter600 in self.struct_list:
                iter600.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.other_i32_field is not None:
            oprot.writeFieldBegin('other_i32_field', TType.I32, 5)
            oprot.writeI32(self.other_i32_field)
            oprot.writeFieldEnd()
        if self.enum_field is not None:
            oprot.writeFieldBegin('enum_field', TType.I32, 6)
            oprot.writeI32(self.enum_field)
            oprot.writeFieldEnd()
        if self.i32_set is not None:
            oprot.writeFieldBegin('i32_set', TType.SET, 7)
            oprot.writeSetBegin(TType.I32, len(self.i32_set))
            for iter601 in self.i32_set:
                oprot.writeI32(iter601)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.i32_map is not None:
            oprot.writeFieldBegin('i32_map', TType.MAP, 8)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.i32_map))
            for kiter602, viter603 in self.i32_map.items():
                oprot.writeI32(kiter602)
                oprot.writeI32(viter603)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TestUnionMinusStringField(object):
    """
    Attributes:
     - i32_field
     - struct_field
     - struct_list
     - other_i32_field
     - enum_field
     - i32_set
     - i32_map
    """


    def __init__(self, i32_field=None, struct_field=None, struct_list=None, other_i32_field=None, enum_field=None, i32_set=None, i32_map=None,):
        self.i32_field = i32_field
        self.struct_field = struct_field
        self.struct_list = struct_list
        self.other_i32_field = other_i32_field
        self.enum_field = enum_field
        self.i32_set = i32_set
        self.i32_map = i32_map

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I32:
                    self.i32_field = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.struct_field = OneOfEach()
                    self.struct_field.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.struct_list = []
                    (_etype607, _size604) = iprot.readListBegin()
                    for _i608 in range(_size604):
                        _elem609 = RandomStuff()
                        _elem609.read(iprot)
                        self.struct_list.append(_elem609)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.other_i32_field = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.enum_field = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.SET:
                    self.i32_set = set()
                    (_etype613, _size610) = iprot.readSetBegin()
                    for _i614 in range(_size610):
                        _elem615 = iprot.readI32()
                        self.i32_set.add(_elem615)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.i32_map = {}
                    (_ktype617, _vtype618, _size616) = iprot.readMapBegin()
                    for _i620 in range(_size616):
                        _key621 = iprot.readI32()
                        _val622 = iprot.readI32()
                        self.i32_map[_key621] = _val622
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TestUnionMinusStringField')
        if self.i32_field is not None:
            oprot.writeFieldBegin('i32_field', TType.I32, 2)
            oprot.writeI32(self.i32_field)
            oprot.writeFieldEnd()
        if self.struct_field is not None:
            oprot.writeFieldBegin('struct_field', TType.STRUCT, 3)
            self.struct_field.write(oprot)
            oprot.writeFieldEnd()
        if self.struct_list is not None:
            oprot.writeFieldBegin('struct_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.struct_list))
            for iter623 in self.struct_list:
                iter623.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.other_i32_field is not None:
            oprot.writeFieldBegin('other_i32_field', TType.I32, 5)
            oprot.writeI32(self.other_i32_field)
            oprot.writeFieldEnd()
        if self.enum_field is not None:
            oprot.writeFieldBegin('enum_field', TType.I32, 6)
            oprot.writeI32(self.enum_field)
            oprot.writeFieldEnd()
        if self.i32_set is not None:
            oprot.writeFieldBegin('i32_set', TType.SET, 7)
            oprot.writeSetBegin(TType.I32, len(self.i32_set))
            for iter624 in self.i32_set:
                oprot.writeI32(iter624)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.i32_map is not None:
            oprot.writeFieldBegin('i32_map', TType.MAP, 8)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.i32_map))
            for kiter625, viter626 in self.i32_map.items():
                oprot.writeI32(kiter625)
                oprot.writeI32(viter626)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ComparableUnion(object):
    """
    Attributes:
     - string_field
     - binary_field
    """


    def __init__(self, string_field=None, binary_field=None,):
        self.string_field = string_field
        self.binary_field = binary_field

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.string_field = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.binary_field = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComparableUnion')
        if self.string_field is not None:
            oprot.writeFieldBegin('string_field', TType.STRING, 1)
            oprot.writeString(self.string_field)
            oprot.writeFieldEnd()
        if self.binary_field is not None:
            oprot.writeFieldBegin('binary_field', TType.STRING, 2)
            oprot.writeBinary(self.binary_field)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StructWithAUnion(object):
    """
    Attributes:
     - test_union
    """


    def __init__(self, test_union=None,):
        self.test_union = test_union

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.test_union = TestUnion()
                    self.test_union.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StructWithAUnion')
        if self.test_union is not None:
            oprot.writeFieldBegin('test_union', TType.STRUCT, 1)
            self.test_union.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PrimitiveThenStruct(object):
    """
    Attributes:
     - blah
     - blah2
     - bw
    """


    def __init__(self, blah=None, blah2=None, bw=None,):
        self.blah = blah
        self.blah2 = blah2
        self.bw = bw

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.blah = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.blah2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.bw = Backwards()
                    self.bw.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PrimitiveThenStruct')
        if self.blah is not None:
            oprot.writeFieldBegin('blah', TType.I32, 1)
            oprot.writeI32(self.blah)
            oprot.writeFieldEnd()
        if self.blah2 is not None:
            oprot.writeFieldBegin('blah2', TType.I32, 2)
            oprot.writeI32(self.blah2)
            oprot.writeFieldEnd()
        if self.bw is not None:
            oprot.writeFieldBegin('bw', TType.STRUCT, 3)
            self.bw.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StructWithASomemap(object):
    """
    Attributes:
     - somemap_field
    """


    def __init__(self, somemap_field=None,):
        self.somemap_field = somemap_field

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.somemap_field = {}
                    (_ktype628, _vtype629, _size627) = iprot.readMapBegin()
                    for _i631 in range(_size627):
                        _key632 = iprot.readI32()
                        _val633 = iprot.readI32()
                        self.somemap_field[_key632] = _val633
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StructWithASomemap')
        if self.somemap_field is not None:
            oprot.writeFieldBegin('somemap_field', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.somemap_field))
            for kiter634, viter635 in self.somemap_field.items():
                oprot.writeI32(kiter634)
                oprot.writeI32(viter635)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.somemap_field is None:
            raise TProtocolException(message='Required field somemap_field is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BigFieldIdStruct(object):
    """
    Attributes:
     - field1
     - field2
    """


    def __init__(self, field1=None, field2=None,):
        self.field1 = field1
        self.field2 = field2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.field1 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.STRING:
                    self.field2 = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BigFieldIdStruct')
        if self.field1 is not None:
            oprot.writeFieldBegin('field1', TType.STRING, 1)
            oprot.writeString(self.field1)
            oprot.writeFieldEnd()
        if self.field2 is not None:
            oprot.writeFieldBegin('field2', TType.STRING, 45)
            oprot.writeString(self.field2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BreaksRubyCompactProtocol(object):
    """
    Attributes:
     - field1
     - field2
     - field3
    """


    def __init__(self, field1=None, field2=None, field3=None,):
        self.field1 = field1
        self.field2 = field2
        self.field3 = field3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.field1 = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.field2 = BigFieldIdStruct()
                    self.field2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.field3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BreaksRubyCompactProtocol')
        if self.field1 is not None:
            oprot.writeFieldBegin('field1', TType.STRING, 1)
            oprot.writeString(self.field1)
            oprot.writeFieldEnd()
        if self.field2 is not None:
            oprot.writeFieldBegin('field2', TType.STRUCT, 2)
            self.field2.write(oprot)
            oprot.writeFieldEnd()
        if self.field3 is not None:
            oprot.writeFieldBegin('field3', TType.I32, 3)
            oprot.writeI32(self.field3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TupleProtocolTestStruct(object):
    """
    Attributes:
     - field1
     - field2
     - field3
     - field4
     - field5
     - field6
     - field7
     - field8
     - field9
     - field10
     - field11
     - field12
    """


    def __init__(self, field1=None, field2=None, field3=None, field4=None, field5=None, field6=None, field7=None, field8=None, field9=None, field10=None, field11=None, field12=None,):
        self.field1 = field1
        self.field2 = field2
        self.field3 = field3
        self.field4 = field4
        self.field5 = field5
        self.field6 = field6
        self.field7 = field7
        self.field8 = field8
        self.field9 = field9
        self.field10 = field10
        self.field11 = field11
        self.field12 = field12

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.I32:
                    self.field1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.I32:
                    self.field2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -3:
                if ftype == TType.I32:
                    self.field3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -4:
                if ftype == TType.I32:
                    self.field4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -5:
                if ftype == TType.I32:
                    self.field5 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -6:
                if ftype == TType.I32:
                    self.field6 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -7:
                if ftype == TType.I32:
                    self.field7 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -8:
                if ftype == TType.I32:
                    self.field8 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -9:
                if ftype == TType.I32:
                    self.field9 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -10:
                if ftype == TType.I32:
                    self.field10 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -11:
                if ftype == TType.I32:
                    self.field11 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -12:
                if ftype == TType.I32:
                    self.field12 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TupleProtocolTestStruct')
        if self.field12 is not None:
            oprot.writeFieldBegin('field12', TType.I32, -12)
            oprot.writeI32(self.field12)
            oprot.writeFieldEnd()
        if self.field11 is not None:
            oprot.writeFieldBegin('field11', TType.I32, -11)
            oprot.writeI32(self.field11)
            oprot.writeFieldEnd()
        if self.field10 is not None:
            oprot.writeFieldBegin('field10', TType.I32, -10)
            oprot.writeI32(self.field10)
            oprot.writeFieldEnd()
        if self.field9 is not None:
            oprot.writeFieldBegin('field9', TType.I32, -9)
            oprot.writeI32(self.field9)
            oprot.writeFieldEnd()
        if self.field8 is not None:
            oprot.writeFieldBegin('field8', TType.I32, -8)
            oprot.writeI32(self.field8)
            oprot.writeFieldEnd()
        if self.field7 is not None:
            oprot.writeFieldBegin('field7', TType.I32, -7)
            oprot.writeI32(self.field7)
            oprot.writeFieldEnd()
        if self.field6 is not None:
            oprot.writeFieldBegin('field6', TType.I32, -6)
            oprot.writeI32(self.field6)
            oprot.writeFieldEnd()
        if self.field5 is not None:
            oprot.writeFieldBegin('field5', TType.I32, -5)
            oprot.writeI32(self.field5)
            oprot.writeFieldEnd()
        if self.field4 is not None:
            oprot.writeFieldBegin('field4', TType.I32, -4)
            oprot.writeI32(self.field4)
            oprot.writeFieldEnd()
        if self.field3 is not None:
            oprot.writeFieldBegin('field3', TType.I32, -3)
            oprot.writeI32(self.field3)
            oprot.writeFieldEnd()
        if self.field2 is not None:
            oprot.writeFieldBegin('field2', TType.I32, -2)
            oprot.writeI32(self.field2)
            oprot.writeFieldEnd()
        if self.field1 is not None:
            oprot.writeFieldBegin('field1', TType.I32, -1)
            oprot.writeI32(self.field1)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListDoublePerf(object):
    """
    Attributes:
     - field
    """


    def __init__(self, field=None,):
        self.field = field

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.field = []
                    (_etype639, _size636) = iprot.readListBegin()
                    for _i640 in range(_size636):
                        _elem641 = iprot.readDouble()
                        self.field.append(_elem641)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListDoublePerf')
        if self.field is not None:
            oprot.writeFieldBegin('field', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.field))
            for iter642 in self.field:
                oprot.writeDouble(iter642)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Doubles)
Doubles.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'nan', None, None, ),  # 1
    (2, TType.DOUBLE, 'inf', None, None, ),  # 2
    (3, TType.DOUBLE, 'neginf', None, None, ),  # 3
    (4, TType.DOUBLE, 'repeating', None, None, ),  # 4
    (5, TType.DOUBLE, 'big', None, None, ),  # 5
    (6, TType.DOUBLE, 'tiny', None, None, ),  # 6
    (7, TType.DOUBLE, 'zero', None, None, ),  # 7
    (8, TType.DOUBLE, 'negzero', None, None, ),  # 8
)
all_structs.append(OneOfEach)
OneOfEach.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'im_true', None, None, ),  # 1
    (2, TType.BOOL, 'im_false', None, None, ),  # 2
    (3, TType.BYTE, 'a_bite', None, 127, ),  # 3
    (4, TType.I16, 'integer16', None, 32767, ),  # 4
    (5, TType.I32, 'integer32', None, None, ),  # 5
    (6, TType.I64, 'integer64', None, 10000000000, ),  # 6
    (7, TType.DOUBLE, 'double_precision', None, None, ),  # 7
    (8, TType.STRING, 'some_characters', None, None, ),  # 8
    (9, TType.STRING, 'zomg_unicode', None, None, ),  # 9
    (10, TType.BOOL, 'what_who', None, None, ),  # 10
    (11, TType.STRING, 'base64', 'BINARY', None, ),  # 11
    (12, TType.LIST, 'byte_list', (TType.BYTE, None, False), [
        1,
        2,
        3,
    ], ),  # 12
    (13, TType.LIST, 'i16_list', (TType.I16, None, False), [
        1,
        2,
        3,
    ], ),  # 13
    (14, TType.LIST, 'i64_list', (TType.I64, None, False), [
        1,
        2,
        3,
    ], ),  # 14
)
all_structs.append(Bonk)
Bonk.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'message', None, None, ),  # 2
)
all_structs.append(Nesting)
Nesting.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'my_bonk', [Bonk, None], None, ),  # 1
    (2, TType.STRUCT, 'my_ooe', [OneOfEach, None], None, ),  # 2
)
all_structs.append(HolyMoley)
HolyMoley.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'big', (TType.STRUCT, [OneOfEach, None], False), None, ),  # 1
    (2, TType.SET, 'contain', (TType.LIST, (TType.STRING, None, True), False), None, ),  # 2
    (3, TType.MAP, 'bonks', (TType.STRING, None, TType.LIST, (TType.STRUCT, [Bonk, None], False), False), None, ),  # 3
)
all_structs.append(Backwards)
Backwards.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'second_tag1', None, None, ),  # 1
    (2, TType.I32, 'first_tag2', None, None, ),  # 2
)
all_structs.append(Empty)
Empty.thrift_spec = (
)
all_structs.append(Wrapper)
Wrapper.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'foo', [Empty, None], None, ),  # 1
)
all_structs.append(RandomStuff)
RandomStuff.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'a', None, None, ),  # 1
    (2, TType.I32, 'b', None, None, ),  # 2
    (3, TType.I32, 'c', None, None, ),  # 3
    (4, TType.I32, 'd', None, None, ),  # 4
    (5, TType.LIST, 'myintlist', (TType.I32, None, False), None, ),  # 5
    (6, TType.MAP, 'maps', (TType.I32, None, TType.STRUCT, [Wrapper, None], False), None, ),  # 6
    (7, TType.I64, 'bigint', None, None, ),  # 7
    (8, TType.DOUBLE, 'triple', None, None, ),  # 8
)
all_structs.append(Base64)
Base64.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'a', None, None, ),  # 1
    (2, TType.STRING, 'b1', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'b2', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'b3', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'b4', 'BINARY', None, ),  # 5
    (6, TType.STRING, 'b5', 'BINARY', None, ),  # 6
    (7, TType.STRING, 'b6', 'BINARY', None, ),  # 7
)
all_structs.append(CompactProtoTestStruct)
CompactProtoTestStruct.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'a_byte', None, None, ),  # 1
    (2, TType.I16, 'a_i16', None, None, ),  # 2
    (3, TType.I32, 'a_i32', None, None, ),  # 3
    (4, TType.I64, 'a_i64', None, None, ),  # 4
    (5, TType.DOUBLE, 'a_double', None, None, ),  # 5
    (6, TType.STRING, 'a_string', None, None, ),  # 6
    (7, TType.STRING, 'a_binary', 'BINARY', None, ),  # 7
    (8, TType.BOOL, 'true_field', None, None, ),  # 8
    (9, TType.BOOL, 'false_field', None, None, ),  # 9
    (10, TType.STRUCT, 'empty_struct_field', [Empty, None], None, ),  # 10
    (11, TType.LIST, 'byte_list', (TType.BYTE, None, False), None, ),  # 11
    (12, TType.LIST, 'i16_list', (TType.I16, None, False), None, ),  # 12
    (13, TType.LIST, 'i32_list', (TType.I32, None, False), None, ),  # 13
    (14, TType.LIST, 'i64_list', (TType.I64, None, False), None, ),  # 14
    (15, TType.LIST, 'double_list', (TType.DOUBLE, None, False), None, ),  # 15
    (16, TType.LIST, 'string_list', (TType.STRING, None, False), None, ),  # 16
    (17, TType.LIST, 'binary_list', (TType.STRING, 'BINARY', False), None, ),  # 17
    (18, TType.LIST, 'boolean_list', (TType.BOOL, None, False), None, ),  # 18
    (19, TType.LIST, 'struct_list', (TType.STRUCT, [Empty, None], False), None, ),  # 19
    (20, TType.SET, 'byte_set', (TType.BYTE, None, False), None, ),  # 20
    (21, TType.SET, 'i16_set', (TType.I16, None, False), None, ),  # 21
    (22, TType.SET, 'i32_set', (TType.I32, None, False), None, ),  # 22
    (23, TType.SET, 'i64_set', (TType.I64, None, False), None, ),  # 23
    (24, TType.SET, 'double_set', (TType.DOUBLE, None, False), None, ),  # 24
    (25, TType.SET, 'string_set', (TType.STRING, None, False), None, ),  # 25
    (26, TType.SET, 'binary_set', (TType.STRING, 'BINARY', False), None, ),  # 26
    (27, TType.SET, 'boolean_set', (TType.BOOL, None, False), None, ),  # 27
    (28, TType.SET, 'struct_set', (TType.STRUCT, [Empty, None], False), None, ),  # 28
    (29, TType.MAP, 'byte_byte_map', (TType.BYTE, None, TType.BYTE, None, False), None, ),  # 29
    (30, TType.MAP, 'i16_byte_map', (TType.I16, None, TType.BYTE, None, False), None, ),  # 30
    (31, TType.MAP, 'i32_byte_map', (TType.I32, None, TType.BYTE, None, False), None, ),  # 31
    (32, TType.MAP, 'i64_byte_map', (TType.I64, None, TType.BYTE, None, False), None, ),  # 32
    (33, TType.MAP, 'double_byte_map', (TType.DOUBLE, None, TType.BYTE, None, False), None, ),  # 33
    (34, TType.MAP, 'string_byte_map', (TType.STRING, None, TType.BYTE, None, False), None, ),  # 34
    (35, TType.MAP, 'binary_byte_map', (TType.STRING, 'BINARY', TType.BYTE, None, False), None, ),  # 35
    (36, TType.MAP, 'boolean_byte_map', (TType.BOOL, None, TType.BYTE, None, False), None, ),  # 36
    (37, TType.MAP, 'byte_i16_map', (TType.BYTE, None, TType.I16, None, False), None, ),  # 37
    (38, TType.MAP, 'byte_i32_map', (TType.BYTE, None, TType.I32, None, False), None, ),  # 38
    (39, TType.MAP, 'byte_i64_map', (TType.BYTE, None, TType.I64, None, False), None, ),  # 39
    (40, TType.MAP, 'byte_double_map', (TType.BYTE, None, TType.DOUBLE, None, False), None, ),  # 40
    (41, TType.MAP, 'byte_string_map', (TType.BYTE, None, TType.STRING, None, False), None, ),  # 41
    (42, TType.MAP, 'byte_binary_map', (TType.BYTE, None, TType.STRING, 'BINARY', False), None, ),  # 42
    (43, TType.MAP, 'byte_boolean_map', (TType.BYTE, None, TType.BOOL, None, False), None, ),  # 43
    (44, TType.MAP, 'list_byte_map', (TType.LIST, (TType.BYTE, None, True), TType.BYTE, None, False), None, ),  # 44
    (45, TType.MAP, 'set_byte_map', (TType.SET, (TType.BYTE, None, True), TType.BYTE, None, False), None, ),  # 45
    (46, TType.MAP, 'map_byte_map', (TType.MAP, (TType.BYTE, None, TType.BYTE, None, True), TType.BYTE, None, False), None, ),  # 46
    (47, TType.MAP, 'byte_map_map', (TType.BYTE, None, TType.MAP, (TType.BYTE, None, TType.BYTE, None, False), False), None, ),  # 47
    (48, TType.MAP, 'byte_set_map', (TType.BYTE, None, TType.SET, (TType.BYTE, None, False), False), None, ),  # 48
    (49, TType.MAP, 'byte_list_map', (TType.BYTE, None, TType.LIST, (TType.BYTE, None, False), False), None, ),  # 49
)
all_structs.append(SingleMapTestStruct)
SingleMapTestStruct.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'i32_map', (TType.I32, None, TType.I32, None, False), None, ),  # 1
)
all_structs.append(ExceptionWithAMap)
ExceptionWithAMap.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'blah', None, None, ),  # 1
    (2, TType.MAP, 'map_field', (TType.STRING, None, TType.STRING, None, False), None, ),  # 2
)
all_structs.append(BlowUp)
BlowUp.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'b1', (TType.LIST, (TType.I32, None, True), TType.SET, (TType.MAP, (TType.I32, None, TType.STRING, None, True), False), False), None, ),  # 1
    (2, TType.MAP, 'b2', (TType.LIST, (TType.I32, None, True), TType.SET, (TType.MAP, (TType.I32, None, TType.STRING, None, True), False), False), None, ),  # 2
    (3, TType.MAP, 'b3', (TType.LIST, (TType.I32, None, True), TType.SET, (TType.MAP, (TType.I32, None, TType.STRING, None, True), False), False), None, ),  # 3
    (4, TType.MAP, 'b4', (TType.LIST, (TType.I32, None, True), TType.SET, (TType.MAP, (TType.I32, None, TType.STRING, None, True), False), False), None, ),  # 4
)
all_structs.append(ReverseOrderStruct)
ReverseOrderStruct.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fourth', None, None, ),  # 1
    (2, TType.I32, 'third', None, None, ),  # 2
    (3, TType.I16, 'second', None, None, ),  # 3
    (4, TType.STRING, 'first', None, None, ),  # 4
)
all_structs.append(StructWithSomeEnum)
StructWithSomeEnum.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'blah', None, None, ),  # 1
)
all_structs.append(TestUnion)
TestUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'string_field', None, None, ),  # 1
    (2, TType.I32, 'i32_field', None, None, ),  # 2
    (3, TType.STRUCT, 'struct_field', [OneOfEach, None], None, ),  # 3
    (4, TType.LIST, 'struct_list', (TType.STRUCT, [RandomStuff, None], False), None, ),  # 4
    (5, TType.I32, 'other_i32_field', None, None, ),  # 5
    (6, TType.I32, 'enum_field', None, None, ),  # 6
    (7, TType.SET, 'i32_set', (TType.I32, None, False), None, ),  # 7
    (8, TType.MAP, 'i32_map', (TType.I32, None, TType.I32, None, False), None, ),  # 8
)
all_structs.append(TestUnionMinusStringField)
TestUnionMinusStringField.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.I32, 'i32_field', None, None, ),  # 2
    (3, TType.STRUCT, 'struct_field', [OneOfEach, None], None, ),  # 3
    (4, TType.LIST, 'struct_list', (TType.STRUCT, [RandomStuff, None], False), None, ),  # 4
    (5, TType.I32, 'other_i32_field', None, None, ),  # 5
    (6, TType.I32, 'enum_field', None, None, ),  # 6
    (7, TType.SET, 'i32_set', (TType.I32, None, False), None, ),  # 7
    (8, TType.MAP, 'i32_map', (TType.I32, None, TType.I32, None, False), None, ),  # 8
)
all_structs.append(ComparableUnion)
ComparableUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'string_field', None, None, ),  # 1
    (2, TType.STRING, 'binary_field', 'BINARY', None, ),  # 2
)
all_structs.append(StructWithAUnion)
StructWithAUnion.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'test_union', [TestUnion, None], None, ),  # 1
)
all_structs.append(PrimitiveThenStruct)
PrimitiveThenStruct.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'blah', None, None, ),  # 1
    (2, TType.I32, 'blah2', None, None, ),  # 2
    (3, TType.STRUCT, 'bw', [Backwards, None], None, ),  # 3
)
all_structs.append(StructWithASomemap)
StructWithASomemap.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'somemap_field', (TType.I32, None, TType.I32, None, False), None, ),  # 1
)
all_structs.append(BigFieldIdStruct)
BigFieldIdStruct.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'field1', None, None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    (45, TType.STRING, 'field2', None, None, ),  # 45
)
all_structs.append(BreaksRubyCompactProtocol)
BreaksRubyCompactProtocol.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'field1', None, None, ),  # 1
    (2, TType.STRUCT, 'field2', [BigFieldIdStruct, None], None, ),  # 2
    (3, TType.I32, 'field3', None, None, ),  # 3
)
all_structs.append(TupleProtocolTestStruct)
TupleProtocolTestStruct.thrift_spec = ()
all_structs.append(ListDoublePerf)
ListDoublePerf.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'field', (TType.DOUBLE, None, False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
